#ifndef STL_STRING
#define STL_STRING

#include "definitions.h"
#include "cstring"

namespace std
{
	struct string
	{
	public:

		string ();
		string (char*);
		string (const char * s, size_t n);
		string (size_t n, char c);
		//char* c_str();
		const char* c_str ( ) const;
		char* string::c_str2 ();
		bool operator ==(string& a ,string& b);
		bool operator !=(string& a ,string& b);
		bool operator >(string& a ,string& b);
		bool operator <(string& a ,string& b);
		bool operator >=(string& a ,string& b);
		bool operator <=(string& a ,string& b);
		string& operator = (char *d, const char *s);
		string& operator += ( const string& str);
		string& operator += (string& d, string& s);
		string& operator+(string&, string&);
		char& operator[] ( size_t pos ) const;
		bool empty ( ) const;
		char& at ( size_t pos ) const;
		int compare ( const string& str ) const;
		int compare ( size_t pos1, size_t n1, const string& str ) const;
		int compare ( size_t pos1, size_t n1, const string& str, size_t pos2, size_t n2 ) const;
		size_t length() const;
		string substr ( size_t pos, size_t npos ) const;
		string substr ( size_t npos ) const;
	};
}

namespace std
{
	const char* str;
	char* str2;

	string::string () 
	{
	}

	string::string (char* s) 
	{
		str=s;
		str2=s;
	}

	string::string (const char * s, size_t n) 
	{
		str=s;
	}

	const char* string::c_str () const
	{
		return str;
	}

	char* string::c_str2 ()
	{
		return str2;
	}

	size_t  string::length() const
	{
		return strlen(str);
	}


	string& string::operator+(string& str1, string& str2)
	{
		return string(strcat(str1.c_str2(), str2.c_str()));
	}

	inline string::ostream& operator << (ostream& o, string)
	{
		return o;
	}
 
	string& string::operator += (string& d, string& s)
	{
		return string(strcat(d.c_str2(), s.c_str()));
	}

	bool string::operator == (string& a ,string& b)
	{
		int aux;
		
		aux = strcmp(a.c_str(), b.c_str());

		if (aux == 0){
			return true;
		}else{
			return false;
		}		
	}

	bool string::operator !=(string& a ,string& b)
	{
		int aux;
		
		aux = strcmp(a.c_str(), b.c_str());

		if (aux == 0){
			return false;
		}else{
			return true;
		}		
	}

	bool string::operator >(string& a ,string& b)
	{
	   if ( strlen(a.c_str()) > strlen(b.c_str()) )
	      return true;

		return false;
	}

	bool string::operator <(string& a ,string& b)
	{
		size_t i;

	   if ( strlen(a.c_str()) < strlen(b.c_str()) )
	      return true;

		return false;
	}

	bool string::operator >=(string& a ,string& b)
	{
		size_t i;

	   if ( strlen(a.c_str()) >= strlen(b.c_str()) )
	      return true;

		return false;
	}

	bool string::operator <=(string& a ,string& b)
	{
		size_t i;

	   if ( strlen(a.c_str()) <= strlen(b.c_str()) )
	      return true;

		return false;
	}

	bool string::empty ( ) const
	{
		if ( strlen(str)==0 ){
			return true;
		}else{
			return false;		
		}
	}

	string& string::operator = (char *d, const char *s)
	{
		size_t i;
	
		for (i = 0; s[i] != '\0'; i++) {
			d[i] = s[i];
		}
	
		d[i] = '\0';
	
		return (string&)d;
	}

	char* string::operator[] ( size_t pos ) const
	{
#if 0
		if (s[i] == '\0') {
			return NULL;
		}
		else {
			return (char*) &s[i];
		}

		return nondet_charPointer();
#endif
	}

	char* string::at ( size_t pos ) const
	{
#if 0
		if (s[i] == '\0') {
			return out_of_range;
		}
		else {
			return (char*) &s[i];
		}

		return nondet_charPointer();
#endif
	}

	string* string::substr ( size_t pos, size_t npos ) const
	{
#if 0
		size_t i,j=0
		string& s;

		for(i=pos; i>npos; i++){
			j++;	
			s[j] = str[i]; 
		}
#endif
		return new string();
	}

	string* string::substr ( size_t pos) const
	{
#if 0
		size_t i,j=0;
		string& s;

		for(i=pos; str[i]; i++){
			j++;	
			s[j] = str[i]; 
		}
#endif
	 return new string();
	}

	int string::compare ( const string& str ) const
	{
#if 0
		size_t i;

	   if ( s[i] != str[i] ){
			if(s[i] < str[i] ){
				return -2;
			}else{
				return 1;
			}
		}

	   for ( int i = 0; i < str[i] ; i++ )

      if ( s[ i ] != str[ i ] )
         return -1;

   	return 1;
#endif

		return nondet_uint();
	}

	int string::compare ( size_t pos1, size_t n1, const string& str ) const
	{
#if 0
		size_t i,j;
		char* aux;

		for(i=pos1; i=n1; i++){
			j++;
			aux[j] = s[i];
		}	

	   if ( aux[i] != str[i] ){
			if(aux[i] < str[i] ){
				return -2;
			}else{
				return 1;
			}
		}

	   for ( int i = 0; i < str[i] ; i++ )

      if ( aux[ i ] != str[ i ] )
         return -1;

   	return 1;
#endif
		return nondet_uint();
	}

	int string::compare ( size_t pos1, size_t n1, const string& str, size_t pos2, size_t n2 ) const
	{
#if 0
		size_t i,j;
		char* aux;
		char* aux2;

		for(i=pos1; i=n1; i++){
			j++;
			aux[j] = s[i];
		}	

		for(i=pos1; i=n1; i++){
			j++;
			aux2[j] = str[i];
		}

	   if ( aux[i] != aux2[i] ){
			if(aux[i] < aux2[i] ){
				return -2;
			}else{
				return 1;
			}
		}

	   for ( int i = 0; i < aux2[i] ; i++ )

      if ( aux[ i ] != aux2[ i ] )
         return -1;

   	return 1;
#endif
		return nondet_uint();
	}
}

#endif
