/*******************************************************************\
 *
 *
 * Author: Blanc Nicolas
 *
 * 
\*******************************************************************/

#ifndef STL_IOSTREAM
#define STL_IOSTREAM

namespace std
{
  struct ostream
  {
    ostream(int id): id(id){}
    int id;
    private:
    ostream(const ostream&); // disabled
    ostream& operator=(const ostream&); // disabled
  };

  struct istream
  {
    istream(int id): id(id){}
    int id;
    private:
    istream(const istream&); // disabled
    istream& operator=(const istream&); // disabled
  };


  struct iostream: ostream, istream
  {
    iostream(int id): ostream(id), istream(id){}
    private:
    iostream(const iostream&); // disabled
    iostream& operator=(const iostream&); // disabled
  };

  extern istream cin;
  extern ostream cout;
  extern ostream cerr;

  char endl = '\n';
}

namespace esbmc
{
	void esbmc_print_cstr(int o, const char* cstr);
	void esbmc_print_char(int o, char c);
	void esbmc_print_int(int o, int i);
	void esbmc_print_double(int o, double d); //Felipe Rodrigues
	void esbmc_print_unsigned(int o, unsigned i); 
	void esbmc_print_bool(int o, bool b);
	void esbmc_print_long_long(int o, long long i);       	
	void esbmc_print_unsigned_long_long(int o, unsigned long long i);

	void esbmc_read_char(int is, char& c);
	void esbmc_read_int(int is,  int& i);
	void esbmc_read_unsigned_long(int is,  unsigned long& l); //Felipe Rodrigues
	void esbmc_read_double(int is,  double& d); //Felipe Rodrigues
}

namespace std
{
	inline istream& operator >> (istream& is, char& c)
	{ 
	  esbmc::esbmc_read_char(is.id,c);
	  return is;
	}

	inline istream& operator >> (istream& is, int& i)
	{ 
	  esbmc::esbmc_read_int(is.id,i);
	  return is;
	}

	inline istream& operator >> (istream& is, unsigned long& l) //Felipe Rodrigues
	{ 
	  esbmc::esbmc_read_unsigned_long(is.id,l);
	  return is;
	}

	inline istream& operator >> (istream& is, double& d) //Felipe Rodrigues
	{ 
	  esbmc::esbmc_read_double(is.id,d);
	  return is;
	}

	
	inline ostream& operator << (ostream& o, const char*  cstr)
	{ 
	  esbmc::esbmc_print_cstr(o.id, cstr);
	  return o;
	}

	inline ostream& operator << (ostream& o, char  c)
	{ 
	  esbmc::esbmc_print_char(o.id, c);
	  return o;
	}

	inline ostream&  operator << (ostream& o, int  i)
	{ 
	  esbmc::esbmc_print_int(o.id, i);
	  return o;
	}

	inline ostream&  operator << (ostream& o, double  d) // Felipe Rodrigues
	{ 
	  esbmc::esbmc_print_double(o.id, d);
	  return o;
	}

	inline ostream& operator << (ostream& o, unsigned  i)
	{ 
	  esbmc::esbmc_print_unsigned(o.id, i);
	  return o;
	}

	inline ostream& operator << (ostream& o, long long  i)
	{ 
	  esbmc::esbmc_print_long_long(o.id, i);
	  return o;
	}

	inline ostream& operator << (ostream& o, unsigned long long  i)
	{ 
	  esbmc::esbmc_print_unsigned_long_long(o.id, i);
	  return o;
	}

	inline ostream& operator << (ostream& o, bool  b)
	{ 
	  esbmc::esbmc_print_bool(o.id, b);
	  return o;
	}

}
#endif
