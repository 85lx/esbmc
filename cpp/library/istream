#ifndef STL_ISTREAM
#define STL_ISTREAM

#include "ios"
#include "definitions.h"

namespace std
{

struct istream: ios
{
//  streamsize width ( ) const;
//  streamsize width ( streamsize wide );
  istream(int id = 0): id(id), ios() {}
  istream (streambuf * sb);
  int id;
  istream& ignore(int i = 1, int delim = EOF);

  int get();
  istream& get ( char& c );
  istream& get ( char* s, streamsize n );
  istream& get ( char* s, streamsize n, char delim );
  istream& get ( streambuf& sb);
  istream& get ( streambuf& sb, char delim );

  static istream& getline(char str[], int size, char delim = '\n');
  streamsize  gcount ( ) const;
//  int rdstate();
  static istream& read ( char* s, streamsize n );
  istream& seekg ( streampos pos ); // model
  istream& seekg ( streamoff off, ios_base::seekdir dir ); // model
  streampos tellg ( ); //model

  int peek ( );
  streamsize readsome ( char* s, streamsize n );
  istream& putback ( char c );
  istream& unget ( );

  int sync ( );
protected:
  streamsize        __gcount;


private:
  istream(const istream&); // disabled
  istream& operator=(const istream&); // disabled
};
}

namespace esbmc
{
  void esbmc_read_char(int is, char& c);
  void esbmc_read_int(int is,  int& i);
  void esbmc_read_unsigned_long(int is,  unsigned long& l);
  void esbmc_read_double(int is,  double& d);
}

namespace std {

inline istream& operator >> (istream& is, char& c)
{
  esbmc::esbmc_read_char(is.id,c);
  return is;
}

template <class T>
T operator >> (istream& is, char c[]) {
  return is;
}

inline bool operator >> (istream& is, char c[])
{
  //	return is;
  return nondet_bool();
}

inline istream& operator >> (istream& is, int& i)
{
  esbmc::esbmc_read_int(is.id,i);
  return is;
}

inline istream& operator >> (istream& is, setw)
{
  return is;
}

inline istream& operator >> (istream& is, unsigned long& l)
{
  esbmc::esbmc_read_unsigned_long(is.id,l);
  return is;
}

inline istream& operator >> (istream& is, double& d)
{
  esbmc::esbmc_read_double(is.id,d);
  return is;
}

int istream::get()
{
  if (nondet_bool())
    return (int) nondet_char();
  else
    return EOF;
}

//istream& get(char str[], int n)
istream& get ( char* s, streamsize n )
{
#if 0
  char *out[nondet_uint() % n];
  str = out;
#endif
  return istream();
}

static istream& istream::getline(char str[], int size, char delim = '\n')
{
#if 0
  char *out[nondet_uint() % n];
  str = out;
#endif
  return istream();
}

istream& istream::read(char* s, streamsize n)
{
#if 0
  char *out[nondet_uint() % size];
  str = out;
#endif
  return istream();
}

istream& ignore(int i = 1, int delim = EOF)
{
  return istream();
}

streamsize istream::gcount() const
{
  return __gcount;
}


//======Global Manipulators=====
istream& ws ( istream& is );
//=======================


}

#endif
