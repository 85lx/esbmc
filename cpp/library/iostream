#ifndef STL_IOSTREAM
#define STL_IOSTREAM

#include "iomanip"
#include "definitions.h"

namespace std
{
	struct ostream
	{
		ostream(int id): id(id){}
		int id;
		void fill(char c);
		void precision(int p);
		void put(char c);
		void write(char str[], size_t n);

	private:
		ostream(const ostream&); // disabled
		ostream& operator=(const ostream&); // disabled
	};

	struct istream
	{
		istream(int id = 0): id(id){}
		int id;
		istream& ignore(int i = 1, int delim = EOF);
		bool eof();
		int get();
		istream& get(char str[], int n);
		istream& getline(char str[], int size, char delim = '\n');
		void read(char str[], int size);
		int gcount();
		int rdstate();

	private:
		istream(const istream&); // disabled
		istream& operator=(const istream&); // disabled
	};

	struct iostream: ostream, istream
	{
		iostream(int id = 0): ostream(id), istream(id){}
	private:
		iostream(const iostream&); // disabled
		iostream& operator=(const iostream&); // disabled
	};

	struct iosStruct
	{
		iosStruct();
	private:
		iosStruct(const iosStruct&);
	};

	extern istream cin;
	extern ostream cout;
	extern ostream cerr;
	extern iosStruct ios;

	char endl = '\n';
}

namespace esbmc
{
	void esbmc_print_cstr(int o, const char* cstr) {};
	void esbmc_print_char(int o, char c) {};
	void esbmc_print_int(int o, int i) {};
	void esbmc_print_double(int o, double d) {}; //Felipe Rodrigues
	void esbmc_print_unsigned(int o, unsigned i) {};
	void esbmc_print_bool(int o, bool b) {};
	void esbmc_print_long_long(int o, long long i) {};
	void esbmc_print_unsigned_long_long(int o, unsigned long long i) {};

	void esbmc_read_char(int is, char& c);
	void esbmc_read_int(int is,  int& i);
	void esbmc_read_unsigned_long(int is,  unsigned long& l); //Felipe Rodrigues
	void esbmc_read_double(int is,  double& d); //Felipe Rodrigues
}

namespace std
{
	inline istream& operator >> (istream& is, char& c)
	{ 
		esbmc::esbmc_read_char(is.id,c);
		return is;
	}

	inline istream& operator >> (istream& is, char c[])
	{
		return is;
	}

	inline istream& operator >> (istream& is, int& i)
	{ 
		esbmc::esbmc_read_int(is.id,i);
		return is;
	}

	inline istream& operator >> (istream& is, setw)
	{
		return is;
	}

	inline istream& operator >> (istream& is, unsigned long& l) //Felipe Rodrigues
	{ 
		esbmc::esbmc_read_unsigned_long(is.id,l);
		return is;
	}

	inline istream& operator >> (istream& is, double& d) //Felipe Rodrigues
	{ 
		esbmc::esbmc_read_double(is.id,d);
		return is;
	}
	
	inline ostream& operator << (ostream& o, const char*  cstr)
	{ 
		esbmc::esbmc_print_cstr(o.id, cstr);
		return o;
	}

	inline ostream& operator << (ostream& o, char  c)
	{ 
		esbmc::esbmc_print_char(o.id, c);
		return o;
	}

	inline ostream&  operator << (ostream& o, int  i)
	{ 
		esbmc::esbmc_print_int(o.id, i);
		return o;
	}

	inline ostream&  operator << (ostream& o, double  d) // Felipe Rodrigues
	{ 
		esbmc::esbmc_print_double(o.id, d);
		return o;
	}

	inline ostream& operator << (ostream& o, unsigned  i)
	{ 
		esbmc::esbmc_print_unsigned(o.id, i);
		return o;

	}
	inline ostream& operator << (ostream& o, long long  i)
	{ 
		esbmc::esbmc_print_long_long(o.id, i);
		return o;
	}

	inline ostream& operator << (ostream& o, unsigned long long  i)
	{ 
		esbmc::esbmc_print_unsigned_long_long(o.id, i);
		return o;
	}

	inline ostream& operator << (ostream& o, bool  b)
	{ 
		esbmc::esbmc_print_bool(o.id, b);
		return o;
	}

	inline ostream& operator << (ostream& o, fixedStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, setprecision)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, setw)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, leftStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, rightStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, hexStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, decStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, octStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, setbase)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, flushStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, setfill)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, scientificStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, showpointStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, showbaseStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, internalStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, showposStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, boolalphaStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, noboolalphaStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, uppercaseStruct)
	{
		return o;
	}

	int istream::get()
	{
		if (nondet_bool())
			return (int) nondet_char();
		else
			return EOF;
	}

	istream& get(char str[], int n)
	{
		#if 0
			char *out[nondet_uint() % n];
			str = out;
		#endif
		return istream();
	}

	istream& getline(char str[], int size, char delim = '\n')
	{
		#if 0
			char *out[nondet_uint() % n];
			str = out;
		#endif
		return istream();
	}

	istream& read(char str[], int size)
	{
		#if 0
			char *out[nondet_uint() % size];
			str = out;
		#endif
		return istream();
	}

	istream& ignore(int i = 1, int delim = EOF)
	{
		return istream();
	}

	bool istream::eof()
	{
		return nondet_bool();
	}

	int istream::gcount()
	{
		return nondet_uint();
	}

	int istream::rdstate()
	{
		return nondet_uint();
	}

	void ostream::fill(char c)
	{
		setfill(c);
	}

	void ostream::precision(int p)
	{
		setprecision(p);
	}

	void ostream::put(char c)
	{
	}

	void ostream::write(char str[], size_t n)
	{
	}

}


#endif
