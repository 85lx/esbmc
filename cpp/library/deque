#ifndef __STL_DEQUE
#define __STL_DEQUE

#include "iterator"

namespace std {
  template <class T>
  class deque {
    public:

    // types:
    typedef T& reference;
    typedef const T& const_reference;
    typedef int size_type;
    typedef int difference_type;
    typedef T value_type;

    // construct/copy/destroy:
    explicit deque();
    explicit deque(size_type n);
    explicit deque(size_type n, const T& value);
    deque(const deque<T>& x);
    ~deque();

    deque<T>& operator=(const deque<T>& x);

    void assign(size_type n, const T& t);

    // iterators:
    iterator begin();
    const_iterator begin() const;
    iterator end();
    const_iterator end() const;
    reverse_iterator rbegin();
    const_reverse_iterator rbegin() const;
    reverse_iterator rend();
    const_reverse_iterator rend() const;

    // capacity:
    size_type size() const;
    size_type max_size() const;
    void resize(size_type sz);
    void resize(size_type sz, T c);

    bool empty() const;

    // element access:
    reference operator[](size_type n);
    const_reference operator[](size_type n) const;
    reference at(size_type n);
    const_reference at(size_type n) const;
    reference front();
    const_reference front() const;
    reference back();
    const_reference back() const;

    // modifiers:
    void push_front(const T& x);
    void push_back(const T& x);
    iterator insert(iterator position, const T& x);
    void insert(iterator position, size_type n, const T& x);

    void pop_front();
    void pop_back();
    iterator erase(iterator position);
    iterator erase(iterator first, iterator last);

    void swap(deque<T>&);
    void clear();

    // comparators:
    bool operator == (const deque<T>&) const;
    bool operator != (const deque<T>&) const;
    bool operator >= (const deque<T>&) const;
    bool operator <= (const deque<T>&) const;
  };
}
#endif

