#define yy_create_buffer yycpp_create_buffer
#define yy_delete_buffer yycpp_delete_buffer
#define yy_scan_buffer yycpp_scan_buffer
#define yy_scan_string yycpp_scan_string
#define yy_scan_bytes yycpp_scan_bytes
#define yy_flex_debug yycpp_flex_debug
#define yy_init_buffer yycpp_init_buffer
#define yy_flush_buffer yycpp_flush_buffer
#define yy_load_buffer_state yycpp_load_buffer_state
#define yy_switch_to_buffer yycpp_switch_to_buffer
#define yyin yycppin
#define yyleng yycppleng
#define yylex yycpplex
#define yyout yycppout
#define yyrestart yycpprestart
#define yytext yycpptext
#define yywrap yycppwrap

#line 20 "lex.yy.cpp"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 170
#define YY_END_OF_BUFFER 171
static yyconst short int yy_accept[573] =
    {   0,
        0,    0,    4,    4,    9,    9,    0,    0,    0,    0,
       16,   16,  171,  169,   18,   20,   19,  133,  169,  120,
      135,  128,  169,  115,  116,  129,  130,  117,  131,  127,
      134,  110,  109,  141,  142,  136,  143,  137,  140,  108,
      108,  125,  126,  138,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  123,  139,  124,  132,    4,    6,
        5,    5,    9,    8,   12,  170,   11,   10,   15,   14,
       13,   16,   17,   18,   20,    0,   19,  155,    0,  114,
        0,    0,    0,  121,  122,    0,    0,    0,  160,  156,

      165,    0,    0,  158,  148,  161,  149,  162,  147,  144,
        0,  112,    1,    7,  159,  112,  110,    0,    0,  110,
        0,  109,  109,  146,  150,  152,  154,  153,  151,  108,
        0,    0,  166,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,   63,  108,  108,  108,  108,
      108,  108,  108,   73,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  167,  157,
        4,    2,    3,    9,   16,    0,    0,    0,  118,    0,
        0,    0,  113,    0,    0,  145,  168,    0,  112,    0,

      112,  111,  163,  164,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   51,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,   70,  108,  108,  108,   75,  108,
      108,  108,   79,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
       96,  108,  108,  108,  108,  108,  108,  108,  108,  108,
        0,    0,    0,    0,    0,    0,    0,  112,  111,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   52,   53,  108,

       55,  108,   57,  108,  108,  108,  108,  108,  108,   65,
       66,  108,  108,  108,  108,   72,  108,   76,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,   94,  108,  108,  108,  108,
      108,  108,  104,  108,  108,  108,    0,    0,    0,    0,
        0,    0,  108,   23,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,   54,   56,   58,   59,  108,  108,  108,  108,  108,
      108,   69,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,   87,  108,  108,  108,  108,  108,

      108,   95,  108,  108,  108,  100,  108,  102,  108,  108,
      108,  107,    0,    0,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,   45,  108,  108,  108,  108,
      108,  108,  108,  108,  108,   26,  108,  108,  108,   62,
       64,  108,   68,   71,   74,  108,  108,  108,  108,  108,
      108,   84,  108,  108,   86,   88,   89,   90,   91,   92,
      108,  108,   98,  108,  108,  108,  108,  108,    0,  108,
       22,  108,   27,   28,  108,  108,  108,   46,   47,   48,
      108,   49,   50,  108,  108,  108,  108,  108,  108,   31,
      108,   61,  108,   77,  108,  108,  108,   82,  108,  108,

      108,  108,   97,  108,  108,  103,  108,  106,    0,  108,
      108,  108,  108,   32,  108,  108,   39,  108,   43,   41,
      108,   60,   67,  108,   80,   81,  108,   85,   35,   93,
       99,  101,  105,    0,  119,  108,  108,  108,  108,  108,
      108,  108,  108,   38,  108,  108,   78,   83,  108,  108,
       29,  108,   33,  108,   37,   40,   44,  108,   21,   24,
      108,  108,  108,  108,  108,  108,   34,   36,   42,   25,
       30,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,    1,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   27,   29,   30,   31,   32,   33,
       34,   35,   36,    1,   37,   37,   37,   37,   38,   39,
       40,   40,   40,   40,   40,   41,   40,   40,   40,   40,
       40,   40,   40,   40,   42,   40,   40,   43,   40,   40,
       44,   45,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   40,   58,   59,   60,   61,
       62,   63,   40,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[77] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    1,    4,    1,    1,    1,    5,
        4,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    1,    1,    1,    1,    1,    7,    8,    9,   10,
       11,   10,   10,    1,    1,    1,    1,   10,    7,    7,
        7,    7,    8,    9,   10,   10,   10,   10,   11,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,    1,    1,   12,    1
    } ;

static yyconst short int yy_base[594] =
    {   0,
        0,    0,   74,   75, 1079, 1078,   78,   83,   85,   91,
     1005, 1004, 1078, 1083,  105, 1083,  111, 1043,   74,  118,
     1042,   67, 1030, 1083, 1083, 1040,   68, 1083,  103,  133,
      118,  162,  213, 1042, 1083,   70, 1038,   89, 1083,    0,
       71, 1083, 1083, 1037,   78,   22,   68,  116,   74,  109,
      105, 1008,  112, 1007, 1001,  144, 1004,   87, 1013,  142,
      154,  115,  139,  158, 1083,   97, 1083, 1083,    0, 1083,
     1044, 1048,    0, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083,    0, 1083,  242, 1083,  254,  271, 1083,  174, 1083,
      272, 1060,  341, 1083, 1059,  327,  171,  130, 1083, 1083,

     1083,  182,  396, 1083, 1083, 1083, 1083, 1083, 1045, 1083,
     1040,  229, 1083, 1083, 1083,  248,  180,  271,  355,  251,
        0,    0,  264, 1083, 1025, 1083, 1083, 1083, 1024,    0,
      207, 1012, 1083,  416, 1004,  994,  994,  987,  990,  998,
      147, 1001, 1000,  987,  163,  980,  981,  978,  168,  982,
      979,  985,  975,    0,  203,  979,  973,  978,  968,  972,
      982,  222,  984,  198,  971,  248,  255,  975,  971,  268,
      959,  966,  270,  971,  963,  167,  970,  968, 1083, 1083,
        0, 1083, 1083,    0,    0,  366,    0, 1021, 1083,  467,
      268,  262, 1083,  403,    0, 1083, 1083,  481, 1083,  490,

      356,  392, 1083, 1083,  280,  168,  970,  952,  960,  958,
      953,  965,  271,  946,  334,  963,  956,    0,  952,  954,
      963,  958,  959,  945,  943,  247,  958,  953,  955,  951,
      943,  943,  948,  951,    0,  946,  936,  940,    0,  941,
      946,  941,    0,  940,  928,  923,  924,  930,  931,  921,
      919,  921,  923,  930,  916,  914,  914,  916,  913,  915,
        0,  923,  913,  917,  912,  906,  919,  921,  920,  909,
      512,  549,  355,  147,  519,  591,  500,  399,  524,  910,
      906,  899,  911,  902,  911,  895,  275,  896,  895,  893,
      902,  904,  892,  903,  894,  901,  894,    0,    0,  892,

        0,  893,    0,  883,  881,  889,  878,  878,  884,    0,
        0,  885,  877,  874,  878,    0,  877,    0,  887,  871,
      869,  885,  884,  879,  874,  865,  865,  864,  848,  859,
      849,  851,  855,  854,  831,    0,  817,  346,  822,  793,
      783,  769,    0,  753,  754,  741,  367,    0,  644,  287,
      404,    0,  668,  674,  657,  669,  654,  659,  664,  659,
      414,  662,  334,  648,  652,  661,  658,  644,  659,  648,
      645,    0,    0,    0,    0,  641,  642,  647,  646,  647,
      636,    0,  644,  642,  635,  630,  625,  625,  624,  638,
      637,  621,  629,  624,    0,  632,  629,  631,  615,  624,

      630,    0,  625,  625,  627,    0,  614,    0,  616,  607,
      615,    0,  702,  311,  601,  613,  603,  600,  592,  592,
      595,  594,  626,  629,  626,    0,  584,  625,  622,  575,
      585,  588,  573,  572,  567,    0,  579,  564,  561,    0,
        0,  569,    0,    0,    0,  572,  575,  559,  560,  559,
      545,    0,  557,  558,    0,    0,    0,    0,    0,    0,
      542,  553,    0,  546,  552,  538,  537,  529,  399,  531,
        0,  542,    0,    0,  527,  524,  532,    0,    0,    0,
      517,    0,    0,  525,  529,  521,  516,  505,  511,    0,
      514,    0,  497,    0,  511,  500,  496,    0,  506,  492,

      489,  501,    0,  500,  500,    0,  498,    0,  547,  495,
      481,  480,  474,  454,  437,  448,  440,  428,  438,    0,
      426,    0,    0,  430,    0,    0,  426,    0,    0,    0,
        0,    0,    0,  473, 1083,  427,  408,  421,  409,  415,
      400,  390,  407,    0,  406,  399,    0,    0,  399,  391,
        0,  375,    0,  387,  366,    0,    0,  365,    0,  351,
      338,  325,  313,  268,  267,   34,    0,    0,    0,    0,
        0, 1083,  732,  744,  756,  768,  780,  792,  804,  816,
      823,  834,  846,  858,  869,  876,  883,  886,  890,  894,
      898,  904,  915

    } ;

static yyconst short int yy_def[594] =
    {   0,
      572,    1,  573,  573,  574,  574,  575,  575,  576,  576,
      577,  577,  572,  572,  572,  572,  572,  572,  578,  579,
      572,  572,  580,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  581,
      581,  572,  572,  572,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  572,  572,  572,  572,  582,  572,
      572,  572,  583,  572,  572,  572,  572,  572,  572,  572,
      572,  584,  572,  572,  572,  572,  572,  572,  578,  572,
      572,  579,  579,  572,  579,  585,  579,  579,  572,  572,

      572,  580,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  586,  572,  572,  572,  586,   32,  587,  572,  572,
      588,   33,  572,  572,  572,  572,  572,  572,  572,  581,
      578,  580,  572,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  572,  572,
      582,  572,  572,  583,  584,  578,  589,  585,  572,  585,
      579,  579,  572,  580,  590,  572,  572,  572,  572,  572,

      591,  588,  572,  572,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      578,  578,  579,  579,  580,  580,  572,  592,  572,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,

      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  578,  272,  579,  579,
      580,  276,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,

      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  579,  579,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  579,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,

      581,  581,  581,  581,  581,  581,  581,  581,  593,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  593,  572,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,    0,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572

    } ;

static yyconst short int yy_nxt[1160] =
    {   0,
       14,   15,   16,   17,   17,   17,   15,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   33,   33,   33,   33,   33,   33,   33,
       34,   35,   36,   37,   38,   39,   40,   40,   40,   40,
       41,   40,   40,   42,   14,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   40,   53,   40,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   40,
       40,   40,   65,   66,   67,   68,   70,   70,  100,  131,
       76,  571,   90,  132,  105,   76,  137,   76,  138,   71,
       71,   77,   78,   76,   72,   72,   77,   78,   80,   81,

      101,  106,  125,  126,   80,   81,   84,   85,   86,   86,
       86,   84,   86,   85,   87,   87,   87,   86,   91,   93,
       94,  107,  128,  129,   93,  134,  145,   95,  135,  139,
      179,  140,   94,  113,  136,  146,  108,  109,  114,   96,
       96,   96,   96,   96,   96,   96,   96,   96,  110,   94,
      162,  115,  111,  163,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  150,  141,  154,  151,  147,  152,  148,
      180,  142,  155,   94,  143,  173,   97,  144,  149,  174,
       98,  116,   90,  117,  117,  117,  117,  117,  117,  117,
      118,  118,  158,  192,  193,  175,  159,  165,  166,  119,

      176,  350,  120,  120,  121,  160,  169,  167,  177,  170,
      168,  222,  223,  178,  119,   90,  227,  171,   91,  283,
      120,  228,  572,  267,  172,  268,  103,  191,  120,  284,
      232,  121,  116,  233,  122,  122,  122,  122,  122,  122,
      122,  122,  122,   84,   85,   86,   86,   86,   84,  572,
      119,   91,  249,  123,  123,   86,   85,   86,   86,   86,
       86,  238,  250,  251,   94,  119,  198,  199,  239,  199,
       94,  123,   86,   85,   87,   87,   87,   86,  246,  123,
       89,  198,  199,  247,   89,  198,  199,  199,  199,   94,
      116,  120,  120,  186,  186,  186,  186,  186,  186,  186,

      198,  199,  253,  255,  123,  123,  199,   89,  119,  120,
      274,  305,  306,   94,  570,  569,   89,  120,  256,  254,
       89,   89,  123,  119,  259,   89,  263,  291,  273,  189,
      123,  260,   89,  360,  264,   89,  292,   89,  280,   89,
      361,  187,   93,   94,  281,  282,  414,   93,  190,  190,
      190,  190,  190,  190,  190,  190,  190,   94,  428,  469,
      568,  429,   96,   96,   96,   96,   96,   96,   96,   96,
       96,  200,  567,  200,   90,   90,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  566,  294,  271,  271,  271,
      271,  271,  271,  271,  199,  295,  199,  403,  565,   97,

      509,   94,  404,   98,  102,  509,  405,  349,  102,  199,
       91,   91,  564,  563,  199,  193,  193,  194,  194,  194,
      194,  194,  194,  194,  275,  275,  275,  275,  275,  275,
      275,  102,  279,  279,  562,  561,  423,  199,  424,  199,
      102,  425,  426,  560,  102,  102,  559,  103,  103,  102,
      279,  558,  199,  557,  556,  555,  102,  199,  279,  102,
      554,  102,  553,  102,  205,  195,  206,  207,  208,  189,
      552,  551,  209,  550,  549,  535,  210,  548,  211,  212,
      213,  214,  547,  215,  546,  545,  544,  543,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  277,  542,  277,

      541,  540,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  201,  201,  201,  201,  201,  201,  201,  201,  201,
       90,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      539,  193,  538,  347,  347,  347,  347,  347,  347,  347,
      351,  351,  351,  351,  351,  351,  351,  537,  536,  535,
      533,  532,  531,  530,  529,  528,   91,   90,  527,  526,
      525,  524,  523,  103,  279,  279,  522,  521,  520,  519,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  518,
      517,  516,  279,  515,  514,  348,  348,  348,  513,  512,
      279,  511,  510,   91,  508,  507,  506,  348,  348,  348,

      348,  348,  348,  193,  505,  504,  503,  502,  501,  500,
      499,  498,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  497,  496,  495,  494,  493,  492,  352,  352,  352,
      491,  490,  489,  488,  487,  103,  486,  485,  484,  352,
      352,  352,  352,  352,  352,  413,   94,  483,  482,  481,
      413,  480,  479,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  468,  467,  466,   96,   96,   96,   96,   96,
       96,   96,   96,   96,  465,  464,  463,  462,  461,  460,
      459,  458,  457,  456,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,

      439,  438,   97,  413,   94,  437,  436,  435,  413,  434,
      433,  432,  431,  430,  427,  422,  421,  420,  419,  418,
      417,  416,  415,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   89,  412,   89,   89,   89,   89,   89,   89,

       89,   89,   89,   89,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,  102,  411,  410,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  130,  130,
      130,  130,  130,  130,  181,  409,  181,  408,  181,  181,
      181,  181,  181,  181,  181,  181,  184,  407,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  112,  406,  112,  112,  402,  112,  118,  118,  401,
      118,  202,  202,  202,  202,  272,  272,  272,  272,  276,

      276,  276,  276,  201,  400,  399,  201,  398,  201,  278,
      397,  396,  278,  395,  278,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  394,  393,  392,
      391,  390,  389,  388,  387,  386,  385,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,
      359,  358,  357,  356,  355,  354,  353,  346,  345,  344,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  317,  316,  315,  314,

      313,  312,  311,  310,  309,  308,  307,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  293,  290,  289,  288,
      287,  286,  285,  189,  270,  269,  266,  265,  262,  261,
      258,  257,  252,  248,  245,  244,  243,  242,  241,  240,
      237,  236,  235,  234,  231,  230,  229,  226,  225,  224,
      221,  220,  219,  218,  217,  216,  103,  204,  203,  197,
      196,   94,   94,  183,  182,  164,  161,  157,  156,  153,
      133,  127,  124,  104,  103,   99,   88,  572,   83,   83,
       74,   74,   13,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572
    } ;

static yyconst short int yy_chk[1160] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,   22,   41,
        7,  566,   19,   41,   27,    8,   46,    9,   46,    3,
        4,    7,    7,   10,    3,    4,    8,    8,    9,    9,

       22,   27,   36,   36,   10,   10,   15,   15,   15,   15,
       15,   15,   17,   17,   17,   17,   17,   17,   19,   20,
       20,   29,   38,   38,   20,   45,   49,   20,   45,   47,
       66,   47,   98,   31,   45,   49,   29,   29,   31,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,  274,
       58,   31,   30,   58,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   51,   48,   53,   51,   50,   51,   50,
       66,   48,   53,   97,   48,   62,   20,   48,   50,   62,
       20,   32,   89,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   56,   98,  102,   63,   56,   60,   60,   32,

       63,  274,   32,   32,   32,   56,   61,   60,   64,   61,
       60,  141,  141,   64,   32,  131,  145,   61,   89,  206,
       32,  145,  117,  176,   61,  176,  102,   97,   32,  206,
      149,   32,   33,  149,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   84,   84,   84,   84,   84,   84,  117,
       33,  131,  164,   33,   33,   86,   86,   86,   86,   86,
       86,  155,  164,  164,  192,   33,  112,  112,  155,  112,
      191,   33,   87,   87,   87,   87,   87,   87,  162,   33,
       91,  112,  112,  162,   91,  116,  116,  112,  116,  350,
      118,  120,  120,   91,   91,   91,   91,   91,   91,   91,

      116,  116,  166,  167,  123,  123,  116,   91,  118,  120,
      192,  226,  226,  414,  565,  564,   91,  120,  167,  166,
       91,   91,  123,  118,  170,   91,  173,  213,  191,   96,
      123,  170,   91,  287,  173,   91,  213,   91,  205,   91,
      287,   91,   93,   93,  205,  205,  350,   93,   96,   96,
       96,   96,   96,   96,   96,   96,   96,  273,  363,  414,
      563,  363,   93,   93,   93,   93,   93,   93,   93,   93,
       93,  119,  562,  119,  186,  347,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  561,  215,  186,  186,  186,
      186,  186,  186,  186,  201,  215,  201,  338,  560,   93,

      469,  469,  338,   93,  103,  469,  338,  273,  103,  201,
      186,  347,  558,  555,  201,  194,  351,  103,  103,  103,
      103,  103,  103,  103,  194,  194,  194,  194,  194,  194,
      194,  103,  202,  202,  554,  552,  361,  278,  361,  278,
      103,  361,  361,  550,  103,  103,  549,  194,  351,  103,
      202,  546,  278,  545,  543,  542,  103,  278,  202,  103,
      541,  103,  540,  103,  134,  103,  134,  134,  134,  190,
      539,  538,  134,  537,  536,  534,  134,  527,  134,  134,
      134,  134,  524,  134,  521,  519,  518,  517,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  198,  516,  198,

      515,  514,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      271,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      513,  275,  512,  271,  271,  271,  271,  271,  271,  271,
      275,  275,  275,  275,  275,  275,  275,  511,  510,  509,
      507,  505,  504,  502,  501,  500,  271,  272,  499,  497,
      496,  495,  493,  275,  279,  279,  491,  489,  488,  487,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  486,
      485,  484,  279,  481,  477,  272,  272,  272,  476,  475,
      279,  472,  470,  272,  468,  467,  466,  272,  272,  272,

      272,  272,  272,  276,  465,  464,  462,  461,  454,  453,
      451,  450,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  449,  448,  447,  446,  442,  439,  276,  276,  276,
      438,  437,  435,  434,  433,  276,  432,  431,  430,  276,
      276,  276,  276,  276,  276,  349,  349,  429,  428,  427,
      349,  425,  424,  423,  422,  421,  420,  419,  418,  417,
      416,  415,  411,  410,  409,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  407,  405,  404,  403,  401,  400,
      399,  398,  397,  396,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  381,  380,  379,  378,

      377,  376,  349,  413,  413,  371,  370,  369,  413,  368,
      367,  366,  365,  364,  362,  360,  359,  358,  357,  356,
      355,  354,  353,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  578,  346,  578,  578,  578,  578,  578,  578,

      578,  578,  578,  578,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  580,  345,  344,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  581,  581,
      581,  581,  581,  581,  582,  342,  582,  341,  582,  582,
      582,  582,  582,  582,  582,  582,  583,  340,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  586,  339,  586,  586,  337,  586,  587,  587,  335,
      587,  588,  588,  588,  588,  589,  589,  589,  589,  590,

      590,  590,  590,  591,  334,  333,  591,  332,  591,  592,
      331,  330,  592,  329,  592,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  328,  327,  326,
      325,  324,  323,  322,  321,  320,  319,  317,  315,  314,
      313,  312,  309,  308,  307,  306,  305,  304,  302,  300,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      286,  285,  284,  283,  282,  281,  280,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  260,  259,  258,  257,
      256,  255,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  242,  241,  240,  238,  237,  236,  234,

      233,  232,  231,  230,  229,  228,  227,  225,  224,  223,
      222,  221,  220,  219,  217,  216,  214,  212,  211,  210,
      209,  208,  207,  188,  178,  177,  175,  174,  172,  171,
      169,  168,  165,  163,  161,  160,  159,  158,  157,  156,
      153,  152,  151,  150,  148,  147,  146,  144,  143,  142,
      140,  139,  138,  137,  136,  135,  132,  129,  125,  111,
      109,   95,   92,   72,   71,   59,   57,   55,   54,   52,
       44,   37,   34,   26,   23,   21,   18,   13,   12,   11,
        6,    5,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.l"
#define INITIAL 0
#define YY_NO_UNPUT 1
#line 4 "scanner.l"

/*************** Includes and Defines *****************************/

#ifdef _WIN32
#define YY_NO_UNISTD_H
static int isatty(int) { return 0; }
#endif

#include <expr.h>
#include <arith_tools.h>
#include <config.h>

#include <ansi-c/c_types.h>
#include <ansi-c/convert_float_literal.h>
#include <ansi-c/convert_integer_literal.h>
#include <ansi-c/unescape_string.h>
#include <ansi-c/preprocessor_line.h>
#include <ansi-c/convert_character_literal.h>
#include <ansi-c/convert_string_literal.h>

#define PARSER cpp_parser
#define YYSTYPE unsigned
#undef  ECHO
#define ECHO

#include "cpp_parser.h"
#include "tokens.h"

void set_line_no();

#define COMMENT1 1

#define COMMENT2 2

#define GCC_ATTRIBUTE 3

#define MSC_DECLSPEC 4

#define MSC_ASM 5

#line 43 "scanner.l"
void cpp_scanner_init()
{
  YY_FLUSH_BUFFER;
  BEGIN(0); // this is INITIAL, hopefully
}
#line 890 "lex.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 82 "scanner.l"



#define set_text() (PARSER.current_token().text=yytext,PARSER.set_location())


#line 1048 "lex.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 573 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1083 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 88 "scanner.l"
{ BEGIN(COMMENT1); }	/* begin C comment state */
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 91 "scanner.l"
{ BEGIN(INITIAL); }	/* end comment state, back to INITIAL */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 92 "scanner.l"
{ yycpperror("Probably nested comments"); }
	YY_BREAK
case YY_STATE_EOF(COMMENT1):
#line 93 "scanner.l"
{ yycpperror("Unterminated comment"); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 94 "scanner.l"
{ /* ignore every char except '*' and NL (performance!) */ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 95 "scanner.l"
{ } /* all single characters within comments are ignored */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 96 "scanner.l"
{ } 
	YY_BREAK

case 7:
YY_RULE_SETUP
#line 99 "scanner.l"
{ BEGIN(COMMENT2); }	/* begin C++ comment state */
	YY_BREAK

case 8:
YY_RULE_SETUP
#line 102 "scanner.l"
{ BEGIN(INITIAL); }	/* end comment state, back to INITIAL */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 103 "scanner.l"
{ } /* all characters within comments are ignored */
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 107 "scanner.l"
{ PARSER.parenthesis_counter--;
         if(PARSER.parenthesis_counter==0)
         BEGIN(INITIAL); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 110 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 111 "scanner.l"
{ /* Throw away */ }
	YY_BREAK


case 13:
YY_RULE_SETUP
#line 115 "scanner.l"
{ PARSER.parenthesis_counter--;
         if(PARSER.parenthesis_counter==0)
         BEGIN(INITIAL); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 118 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 119 "scanner.l"
{ /* Throw away */ }
	YY_BREAK

case 16:
YY_RULE_SETUP
#line 122 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 123 "scanner.l"
{ BEGIN(INITIAL); }
	YY_BREAK

case 18:
YY_RULE_SETUP
#line 126 "scanner.l"

	YY_BREAK
case 19:
YY_RULE_SETUP
#line 127 "scanner.l"

	YY_BREAK
case 20:
YY_RULE_SETUP
#line 128 "scanner.l"

	YY_BREAK
case 21:
YY_RULE_SETUP
#line 130 "scanner.l"
{ set_text(); return SIZEOF; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 131 "scanner.l"
{ set_text(); return ASM; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 132 "scanner.l"
{ if(PARSER.mode==cpp_parsert::MSC)
                        BEGIN(MSC_ASM);
                      else
                      {
                        set_text();
                        return ASM;
                      }
                    }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 140 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 141 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 142 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 143 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 144 "scanner.l"
{ set_text(); return CONST; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 145 "scanner.l"
{ BEGIN(MSC_DECLSPEC); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 146 "scanner.l"
{ set_text(); return Ignore; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 147 "scanner.l"
{ set_text(); return INLINE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 148 "scanner.l"
{ set_text(); return INLINE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 149 "scanner.l"
{ set_text(); return INLINE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 150 "scanner.l"
{ set_text(); return Ignore; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 151 "scanner.l"
{ set_text(); return Ignore; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 152 "scanner.l"
{ set_text(); return Ignore; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 153 "scanner.l"
{ set_text(); return Ignore; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 154 "scanner.l"
{ set_text(); return Ignore; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 155 "scanner.l"
{ set_text(); return SIGNED; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 156 "scanner.l"
{ set_text(); return SIGNED; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 157 "scanner.l"
{ set_text(); return Ignore; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 158 "scanner.l"
{ set_text(); return VOLATILE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 159 "scanner.l"
{ set_text(); return TYPEOF; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 160 "scanner.l"
{ set_text(); return TYPEOF; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 161 "scanner.l"
{ set_text(); return INT8; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 162 "scanner.l"
{ set_text(); return INT16; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 163 "scanner.l"
{ set_text(); return INT32; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 164 "scanner.l"
{ set_text(); return INT64; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 165 "scanner.l"
{ set_text(); return PTR32; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 166 "scanner.l"
{ set_text(); return PTR64; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 167 "scanner.l"
{ set_text(); return ASM; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 168 "scanner.l"
{ set_text(); return AUTO; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 169 "scanner.l"
{ set_text(); return BOOLEAN; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 170 "scanner.l"
{ set_text(); return BREAK; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 171 "scanner.l"
{ set_text(); return CASE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 172 "scanner.l"
{ set_text(); return CATCH; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 173 "scanner.l"
{ set_text(); return CHAR; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 174 "scanner.l"
{ set_text(); return CLASS; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 175 "scanner.l"
{ set_text(); return CONST; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 176 "scanner.l"
{ set_text(); return CONTINUE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 177 "scanner.l"
{ set_text(); return DEFAULT; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 178 "scanner.l"
{ set_text(); return DELETE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 179 "scanner.l"
{ set_text(); return DO; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 180 "scanner.l"
{ set_text(); return DOUBLE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 181 "scanner.l"
{ set_text(); return ELSE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 182 "scanner.l"
{ set_text(); return ENUM; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 183 "scanner.l"
{ set_text(); return EXPLICIT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 184 "scanner.l"
{ set_text(); return EXTERN; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 185 "scanner.l"
{ set_text(); return FLOAT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 186 "scanner.l"
{ set_text(); return FOR; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 187 "scanner.l"
{ set_text(); return FRIEND; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 188 "scanner.l"
{ set_text(); return GOTO; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 189 "scanner.l"
{ set_text(); return IF; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 190 "scanner.l"
{ set_text(); return INLINE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 191 "scanner.l"
{ set_text(); return INT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 192 "scanner.l"
{ set_text(); return LONG; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 193 "scanner.l"
{ set_text(); return MUTABLE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 194 "scanner.l"
{ set_text(); return NAMESPACE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 195 "scanner.l"
{ set_text(); return NEW; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 196 "scanner.l"
{ set_text(); return Ignore; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 197 "scanner.l"
{ set_text(); return OPERATOR; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 198 "scanner.l"
{ set_text(); return PRIVATE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 199 "scanner.l"
{ set_text(); return PROTECTED; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 200 "scanner.l"
{ set_text(); return PUBLIC; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 201 "scanner.l"
{ set_text(); return REGISTER; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 202 "scanner.l"
{ set_text(); return RETURN; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 203 "scanner.l"
{ set_text(); return SHORT; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 204 "scanner.l"
{ set_text(); return SIGNED; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 205 "scanner.l"
{ set_text(); return SIZEOF; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 206 "scanner.l"
{ set_text(); return STATIC; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 207 "scanner.l"
{ set_text(); return STRUCT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 208 "scanner.l"
{ set_text(); return SWITCH; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 209 "scanner.l"
{ set_text(); return TEMPLATE; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 210 "scanner.l"
{ set_text(); return THIS; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 211 "scanner.l"
{ set_text(); return THROW; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 212 "scanner.l"
{ set_text(); return TRY; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 213 "scanner.l"
{ set_text(); return TYPEDEF; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 214 "scanner.l"
{ set_text(); return TYPEID; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 215 "scanner.l"
{ set_text(); return TYPENAME; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 216 "scanner.l"
{ set_text(); return UNION; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 217 "scanner.l"
{ set_text(); return UNSIGNED; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 218 "scanner.l"
{ set_text(); return USING; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 219 "scanner.l"
{ set_text(); return VIRTUAL; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 220 "scanner.l"
{ set_text(); return VOID; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 221 "scanner.l"
{ set_text(); return VOLATILE; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 222 "scanner.l"
{ set_text(); return WCHAR_T; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 223 "scanner.l"
{ set_text(); return WHILE; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 225 "scanner.l"
{ set_text();
                      return Identifier; // or TYPDEFname
                    }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 229 "scanner.l"
{ set_text();
                      convert_integer_literal(yytext, PARSER.current_token().data, 10);
                      return Constant;
                    }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 234 "scanner.l"
{ set_text();
                      convert_integer_literal(yytext, PARSER.current_token().data, 8);
                      return Constant;
                    }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 239 "scanner.l"
{ set_text();
                      convert_integer_literal(yytext, PARSER.current_token().data, 16);
                      return Constant;
                    }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 244 "scanner.l"
{
                      set_text();
                      convert_float_literal(yytext, PARSER.current_token().data);
                      return Constant;
                    }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 250 "scanner.l"
{ 
                      set_text();
                      convert_character_literal(yytext, PARSER.current_token().data);
                      return Constant;
                    }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 256 "scanner.l"
{
                      set_text();
                      convert_string_literal(yytext, PARSER.current_token().data);
                      return StringL;
                    }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 262 "scanner.l"
{ set_text(); return yytext[0]; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 263 "scanner.l"
{ set_text(); return yytext[0]; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 264 "scanner.l"
{ set_text(); return yytext[0]; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 266 "scanner.l"
{ set_line_no(); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 267 "scanner.l"
{ /* ignore it */ }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 269 "scanner.l"

	YY_BREAK
case 121:
YY_RULE_SETUP
#line 271 "scanner.l"
{ yycpperror("unknown preprocessor directive"); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 273 "scanner.l"
{ }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 275 "scanner.l"
{ set_text(); return '{'; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 276 "scanner.l"
{ set_text(); return '}'; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 277 "scanner.l"
{ set_text(); return '['; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 278 "scanner.l"
{ set_text(); return ']'; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 279 "scanner.l"
{ set_text(); return '.'; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 280 "scanner.l"
{ set_text(); return '&'; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 281 "scanner.l"
{ set_text(); return '*'; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 282 "scanner.l"
{ set_text(); return '+'; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 283 "scanner.l"
{ set_text(); return '-'; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 284 "scanner.l"
{ set_text(); return '~'; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 285 "scanner.l"
{ set_text(); return '!'; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 286 "scanner.l"
{ set_text(); return '/'; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 287 "scanner.l"
{ set_text(); return '%'; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 288 "scanner.l"
{ set_text(); return '<'; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 289 "scanner.l"
{ set_text(); return '>'; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 290 "scanner.l"
{ set_text(); return '^'; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 291 "scanner.l"
{ set_text(); return '|'; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 292 "scanner.l"
{ set_text(); return '?'; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 293 "scanner.l"
{ set_text(); return ':'; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 294 "scanner.l"
{ set_text(); return ';'; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 295 "scanner.l"
{ set_text(); return '='; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 297 "scanner.l"
{ set_text(); return PmOp; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 298 "scanner.l"
{ set_text(); return PmOp; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 299 "scanner.l"
{ set_text(); return Scope; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 300 "scanner.l"
{ set_text(); return ArrowOp; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 301 "scanner.l"
{ set_text(); return IncOp; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 302 "scanner.l"
{ set_text(); return IncOp; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 303 "scanner.l"
{ set_text(); return ShiftOp; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 304 "scanner.l"
{ set_text(); return ShiftOp; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 305 "scanner.l"
{ set_text(); return RelOp; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 306 "scanner.l"
{ set_text(); return RelOp; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 307 "scanner.l"
{ set_text(); return EqualOp; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 308 "scanner.l"
{ set_text(); return EqualOp; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 309 "scanner.l"
{ set_text(); return LogAndOp; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 310 "scanner.l"
{ set_text(); return LogOrOp; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 311 "scanner.l"
{ set_text(); return AssignOp; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 312 "scanner.l"
{ set_text(); return AssignOp; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 313 "scanner.l"
{ set_text(); return AssignOp; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 314 "scanner.l"
{ set_text(); return AssignOp; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 315 "scanner.l"
{ set_text(); return AssignOp; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 316 "scanner.l"
{ set_text(); return AssignOp; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 317 "scanner.l"
{ set_text(); return AssignOp; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 318 "scanner.l"
{ set_text(); return AssignOp; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 319 "scanner.l"
{ set_text(); return AssignOp; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 320 "scanner.l"
{ set_text(); return AssignOp; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 321 "scanner.l"
{ set_text(); return Ellipsis; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 323 "scanner.l"
{ yycpperror("unknown character"); }
	YY_BREAK

case 170:
YY_RULE_SETUP
#line 326 "scanner.l"
ECHO;
	YY_BREAK
#line 2029 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT2):
case YY_STATE_EOF(GCC_ATTRIBUTE):
case YY_STATE_EOF(MSC_DECLSPEC):
case YY_STATE_EOF(MSC_ASM):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 573 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 573 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 572);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 326 "scanner.l"


int yywrap() { return 1; }

void set_line_no()
{
  preprocessor_line(yytext, PARSER.line_no, PARSER.filename);
}
