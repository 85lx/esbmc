/*******************************************************************\

Module: 

Author: Felipe Rodrigues

Date: Feb 2012

\*******************************************************************/

#ifndef STL_STRING
#define STL_STRING

#include "definitions.h"
#include "cstring"
#include "ostream"
#include "istream"

static const size_t npos = -1;

namespace std
{

	struct string
	{
		//Objetos
			const char* str;
			char* str2;
	public:

		struct const_iterator{
		public:
		    const_iterator(const const_iterator&);
		    const_iterator();
		    const_iterator& operator=(const const_iterator&);

		    template<typename T>
		    const T* operator -> ();

		    template<class T>
		    const T& operator * ();
		    const_iterator& operator * ();

		    const_iterator& operator ++ ();
		    const_iterator& operator ++ (int);

		    const_iterator& operator -- ();
		    const_iterator& operator -- (int);

		    bool operator == ( const const_iterator&)const;
		    bool operator != ( const const_iterator&)const;

		    bool operator < ( const const_iterator&)const;
		    bool operator > ( const const_iterator&)const;

		    bool operator <= ( const const_iterator&)const;
		    bool operator >= ( const const_iterator&)const;

		    const_iterator operator + (int) const;
		    const_iterator operator - (int) const;

		    const_iterator& operator += (int);
		    const_iterator& operator -= (int);
		};

		string ();
		string (char*);
		string (const char * s, size_t n);
		string (size_t n, char c);
		char* c_str();
		const char* c_str ( ) const;
		char* c_str2 ();
	    const_iterator begin() const;
	    const_iterator end() const;
		bool operator== (string& b);
		bool operator== ( const char* lhs);
		bool operator== (string& a, string& b);
		bool operator== ( const char* lhs, string& rhs );
		bool operator== ( string& lhs, const char* rhs );
		bool operator!= (string& a);
		bool operator!= ( const char* lhs );
		bool operator!= ( const char* lhs, string& rhs );
		bool operator!= ( string& lhs, const char* rhs );
		bool operator> (string& a);
		bool operator> ( const char* lhs, string& rhs );
		bool operator> ( string& lhs, const char* rhs );
		bool operator< (string& a);
		bool operator< ( const char* lhs, string& rhs );
		bool operator< ( string& lhs, const char* rhs );
		bool operator>= (string& a);
		bool operator>= ( const char* lhs, string& rhs );
		bool operator>= ( string& lhs, const char* rhs );
		bool operator<= (string& a);
		bool operator<= ( const char* lhs, string& rhs );
		bool operator<= ( string& lhs, const char* rhs );
#if 0
		string& operator= ( string& str );
		string& operator= ( const char* s );
#endif
		string& operator= ( const string& str );
		string& operator= ( const char* s );
		string& operator= ( char c );
		string& operator+= (const string& d);
		string operator += (string& d, string& s);
		string& operator += (const char* d); //TEST
		string operator+(const string& str1,const string& str3);
		string operator+ (const string& d);
		char& operator[] ( size_t pos );
		bool empty ( ) const;
		char& at ( size_t pos ) const;
		int compare ( const string& str ) const;
		int compare ( int pos1, size_t n1, string& str ) const;
		int compare ( size_t pos1, size_t n1, string& s, size_t pos2, size_t n2 ) const;
		size_t length() const;
		string substr ( size_t pos, size_t npos ) const;
		string substr ( size_t npos ) const;
		size_t find_first_of ( const string& str, size_t pos = 0 ) const;
		size_t find_first_of ( const char* s, size_t pos, size_t n ) const;
		size_t find_first_of ( const char* s, size_t pos = 0 ) const;
		size_t find_first_of ( char c, size_t pos = 0 ) const;
		size_t find ( const string& str, size_t pos = 0 ) const;
		size_t find ( const char* s, size_t pos, size_t n ) const;
		size_t find ( const char* s, size_t pos = 0 ) const;
		size_t find ( char c, size_t pos = 0 ) const;
		string& assign ( const string& str );
		string& assign ( const string& str, size_t pos, size_t n );
		string& assign ( const char* s, size_t n );
		string& assign ( const char* s );
		string& assign ( size_t n, char c );
		string& append ( const string& str );
		string& append ( const string& str, size_t pos, size_t n );
		string& append ( const char* s, size_t n );
		string& append ( const char* s );
		string& append ( size_t n, char c );
		void swap ( string& str );
		void resize ( size_t n, char c );
		void resize ( size_t n );
		size_t capacity ( ) const;
		size_t max_size ( ) const;
		size_t size() const;
		size_t rfind ( const string& str, size_t pos = npos ) const;
		size_t rfind ( const char* s, size_t pos, size_t n ) const;
		size_t rfind ( const char* s, size_t pos = npos ) const;
		size_t rfind ( char c, size_t pos = npos ) const;
		size_t find_last_of ( const string& str, size_t pos = npos ) const;
		size_t find_last_of ( const char* s, size_t pos, size_t n ) const;
		size_t find_last_of ( const char* s, size_t pos = npos ) const;
		size_t find_last_of ( char c, size_t pos = npos ) const;
		size_t find_first_not_of ( const string& str, size_t pos = 0 ) const;
		size_t find_first_not_of ( const char* s, size_t pos, size_t n ) const;
		size_t find_first_not_of ( const char* s, size_t pos = 0 ) const;
		size_t find_first_not_of ( char c, size_t pos = 0 ) const;
		string& erase ( size_t pos = 0, size_t n = npos );
		string& replace ( size_t pos1, size_t n1,   const string& str );
		string& replace ( size_t pos1, size_t n1, const string& str, size_t pos2, size_t n2 );
		string& replace ( size_t pos1, size_t n1,   const char* s, size_t n2 );
		string& replace ( size_t pos1, size_t n1,   const char* s );
		string& replace ( size_t pos1, size_t n1,   size_t n2, char c );
		string& insert ( size_t pos1, const string& str );
		string& insert ( size_t pos1, const string& str, size_t pos2, size_t n );
		string& insert ( size_t pos1, const char* s, size_t n);
		string& insert ( size_t pos1, const char* s );
		string& insert ( size_t pos1, size_t n, char c );
		size_t copy ( char* s, size_t n, size_t pos = 0) const;
		const char* data() const;
	};
}

namespace std
{
//Construtores

	string::string ()
	{
	}

	string::string (char* s)
	{
		str=s;
		str2=s;
	}

	string::string (const char * s, size_t n)
	{
		str=s;
	}

//Funçoẽs de suporte

	const char* string::c_str () const
	{
		return str;
	}

	char* string::c_str2 ()
	{
		return str2;
	}

//Impressão de strings

	inline string::ostream& operator << (ostream& o, string)
	{
		return o;
	}

	inline string::ostream& operator << (ostream& o, struct const_iterator&)
	{
		return o;
	}

//Inserção de strings

	inline string::istream& operator >> (istream& is, string)
	{
		return is;
	}

//Função para saber o tamanho da string

	size_t  string::length() const
	{
		return strlen(str);
	}
}

#endif
