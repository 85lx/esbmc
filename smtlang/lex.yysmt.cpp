#define yy_create_buffer yysmt_create_buffer
#define yy_delete_buffer yysmt_delete_buffer
#define yy_scan_buffer yysmt_scan_buffer
#define yy_scan_string yysmt_scan_string
#define yy_scan_bytes yysmt_scan_bytes
#define yy_flex_debug yysmt_flex_debug
#define yy_init_buffer yysmt_init_buffer
#define yy_flush_buffer yysmt_flush_buffer
#define yy_load_buffer_state yysmt_load_buffer_state
#define yy_switch_to_buffer yysmt_switch_to_buffer
#define yyin yysmtin
#define yyleng yysmtleng
#define yylex yysmtlex
#define yyout yysmtout
#define yyrestart yysmtrestart
#define yytext yysmttext

#line 19 "lex.yysmt.cpp"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
static yyconst short int yy_accept[736] =
    {   0,
        0,    0,    0,    0,    2,    2,    5,    5,   61,   60,
        6,   14,   57,   60,    8,    9,   55,   55,   60,    7,
       60,   10,   11,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   12,   13,    1,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   60,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    5,    5,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,   60,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    6,   57,   53,    0,   55,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,    7,   52,    0,
        0,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   47,   56,   56,   56,   56,
       56,    2,    0,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    7,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    5,    0,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    7,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,   53,   58,   58,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   52,    0,   59,    0,   46,   56,
       56,   56,   56,   56,   56,   56,   49,   56,   44,   50,
       56,   42,   17,   56,   56,   56,   56,   48,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,   58,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,    0,    0,
       56,   56,   56,   56,   51,   56,   56,   56,   56,   56,
       39,   56,   56,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   54,   54,   54,   54,   54,   54,   31,
       54,   54,   54,   54,   54,   54,   54,    0,   56,   56,
       56,   40,   56,   56,   56,   28,   56,   56,   18,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,   54,   54,   54,   54,   54,   54,   54,   20,   26,
       32,   30,   54,   54,   56,   56,   38,   37,   56,   56,
       27,   56,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,   54,   34,   54,   54,   54,   54,
       54,   54,   54,   16,   29,   56,   56,   56,   43,   19,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,   54,   54,   54,   54,   54,   54,   24,   54,
       56,   41,   56,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,   54,   54,   54,   54,   54,
       54,   35,   15,   56,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    5,    5,    5,    5,    5,    5,    5,
        5,    5,   54,   54,   54,   21,   54,   54,   56,    2,

        2,    2,    2,    2,    2,    2,    5,    5,    5,    5,
        5,    5,    5,   25,   33,   36,   22,   23,   56,    2,
        2,    2,    2,    2,    2,    5,    5,    5,    5,    5,
        5,   45,    2,    5,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    5,    5,    7,    8,
        9,    5,    5,    1,    5,   10,    5,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,   14,    5,
        5,    5,   15,    5,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       29,   36,   37,   38,   39,   29,   40,   41,   42,   29,
       16,   17,   18,    1,   19,    1,   20,   21,   22,   23,

       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   29,   36,   37,   38,   39,   29,   40,   41,
       42,   29,   43,    5,   44,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[45] =
    {   0,
        1,    1,    2,    3,    1,    1,    4,    1,    1,    4,
        4,    4,    1,    1,    1,    1,    1,    1,    4,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    6
    } ;

static yyconst short int yy_base[764] =
    {   0,
        0,    0,    2,    4,   48,    0,   92,    0, 1677, 1678,
      135, 1678, 1671,    0, 1678, 1678, 1665,  129,  122,    0,
        0,  132, 1678, 1641, 1649,    0, 1644, 1630,  130,  124,
      124, 1636, 1633, 1648,  127, 1634, 1632, 1678, 1678, 1678,
     1678, 1648,  149, 1647,  160,  177, 1646, 1645,  157,  158,
      220,  261,  305,  254,    0, 1644,  348,  391, 1636,  148,
      243,  248,  245,  251,  252,  256,  267,  266,  264,  265,
     1642, 1641,  356, 1678,  350,  434, 1640, 1639,  264,  284,
      478,  365,  522,  359,    0, 1638,  566,  610, 1630,  276,
      336,  354,  378,  355,  356,  348,  363,  387,  388,  393,

     1636, 1635,  416, 1646,    0,  413,  418,  385,    0, 1626,
     1608,  264,  553, 1614, 1611,  551, 1619,    0,    0,  420,
      579,    0, 1622, 1611, 1606, 1614, 1610, 1616, 1603,  551,
     1603, 1613, 1598, 1609, 1596,    0, 1595, 1608, 1592,  383,
     1594, 1612,    0,  591,  381,  654,  584,  619,  697,  740,
     1604, 1586,  564,  566, 1592, 1589,  568, 1597,  604,    0,
      783,  620,  628, 1606, 1598,  408,  581,  580,  619,  611,
     1597,  596,  625,  553, 1596,  627,  147,  628, 1595,  637,
     1594,  640,  650,  649, 1600,    0,  674,  673,  826,  671,
      706,  870,  914, 1592, 1574,  647,  673, 1580, 1577,  658,

     1585,  691,    0,  958,  707,  715, 1594, 1586,  698,  706,
      713,  707,  705, 1585,  723,  741,  727, 1584,  737,  743,
      739, 1583,  740, 1582,  665,  744,  746,    0,  760,  768,
        0, 1568, 1576, 1578, 1564, 1565, 1567, 1566, 1572, 1559,
     1572, 1559, 1574, 1569,    0,  782, 1678,  791,    0, 1570,
     1553, 1553, 1552, 1550, 1567, 1548,    0, 1554,    0,    0,
     1556,    0,    0, 1549, 1558, 1548, 1560,    0, 1002,  794,
      796,    0, 1542, 1550, 1552, 1538, 1539, 1541, 1540, 1546,
     1533, 1546, 1533, 1548, 1543,  773, 1045,  803, 1549,  834,
     1548, 1540,  788,  792,  799,  800,  795,  798,  824, 1539,

      825, 1538, 1537,  797, 1536, 1535,  685, 1534,  826,  833,
     1533, 1088,  843,  878,    0, 1519, 1527, 1529, 1515, 1516,
     1518, 1517, 1523, 1510, 1523, 1510, 1525, 1520,  860, 1132,
      880, 1526,  887, 1525, 1517,  843,  842,  837,  844,  858,
      882,  870, 1516,  879, 1515, 1514,  897, 1513, 1512,  900,
     1511,  885,  913, 1510,  924, 1494, 1498, 1503,  902, 1498,
     1492, 1502, 1499, 1502, 1502, 1486, 1485, 1488,  926,  929,
     1494, 1492, 1481, 1494,    0, 1486, 1489, 1487, 1492, 1477,
        0, 1478, 1473,  934, 1471, 1475, 1480,  919, 1475, 1469,
     1479, 1476, 1479, 1479, 1463, 1462, 1465,  945,  936,  966,

      941,  928,  956, 1474, 1473,  957,  958,  962,  969,  963,
     1472,  988,  971, 1012, 1456, 1460, 1465,  989, 1460, 1454,
     1464, 1461, 1464, 1464, 1448, 1447, 1450, 1023,  979, 1019,
     1011, 1015,  976, 1459, 1458,  997, 1017, 1028, 1033, 1040,
     1457, 1041, 1042, 1448, 1447, 1445, 1444, 1456, 1436,    0,
     1435, 1451, 1435, 1434, 1433, 1430, 1432, 1056, 1435, 1433,
     1428,    0, 1433, 1439, 1438,    0, 1419, 1420,    0, 1427,
     1426, 1424, 1423, 1435, 1415,    0, 1414, 1430, 1414, 1413,
     1412, 1409, 1411, 1060,  869, 1009, 1046, 1422, 1055, 1421,
     1420, 1419, 1057, 1058, 1418, 1409, 1408, 1406, 1405, 1417,

     1397,    0, 1396, 1412, 1396, 1395, 1394, 1391, 1393, 1096,
     1060, 1086, 1063, 1404, 1087, 1403, 1402, 1401, 1088, 1096,
     1400, 1388, 1385, 1393, 1383, 1090, 1388, 1398,    0,    0,
        0,    0, 1380, 1374, 1395, 1392,    0,    0, 1380, 1375,
        0, 1378, 1375, 1372, 1380, 1370, 1091, 1375, 1385,    0,
        0,    0,    0, 1367, 1361, 1097, 1100, 1378, 1377, 1118,
     1115, 1376, 1120, 1364, 1361, 1369, 1359, 1129, 1364, 1374,
        0,    0,    0,    0, 1356, 1350, 1135, 1134, 1367, 1366,
     1136, 1133, 1365, 1138, 1350,    0, 1349, 1358, 1346, 1348,
     1349, 1362, 1355,    0,    0, 1344, 1341, 1359,    0,    0,

     1339,    0, 1338, 1347, 1335, 1337, 1338, 1351, 1344,    0,
        0, 1137, 1105, 1144, 1345, 1344, 1329,    0, 1328, 1337,
     1325, 1327, 1328, 1341, 1334,    0,    0, 1141, 1143, 1155,
     1335, 1334, 1329, 1328, 1321, 1321, 1329, 1316,    0, 1327,
     1320,    0, 1325, 1320, 1319, 1312, 1312, 1320, 1307,    0,
     1318, 1148, 1317, 1316, 1311, 1310, 1303, 1303, 1311, 1298,
        0, 1309, 1156, 1308, 1307, 1296, 1295, 1295, 1290, 1288,
     1267,    0,    0, 1267, 1259, 1253, 1237, 1212, 1219, 1193,
        0, 1195, 1158, 1166, 1162, 1162, 1157, 1170, 1154,    0,
     1167, 1159, 1155, 1154, 1086,    0, 1058, 1048,  997,  965,

      937,  932,    0,  913,  875, 1160,  825,  805,  758,    0,
      736,  715, 1161,    0,    0,    0,    0,    0,  660,    0,
        0,    0,    0,    0,  598,    0,    0,    0,    0,    0,
      554,    0,  502,  458, 1678,  396,  370, 1198,  268, 1201,
     1206, 1211, 1217, 1223, 1228, 1234, 1240, 1246, 1249, 1251,
     1253, 1258, 1263, 1268, 1274, 1279, 1284, 1290, 1296, 1302,
     1308, 1314, 1320
    } ;

static yyconst short int yy_def[764] =
    {   0,
      735,    1,    1,    1,  735,    5,  735,    7,  735,  735,
      735,  735,  735,  736,  735,  735,  735,  735,  737,  738,
      739,  735,  735,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  735,  735,  735,
      735,  741,  741,  741,  741,  735,  741,  741,  741,  741,
      735,  742,  735,  741,  743,  741,  744,  744,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
      741,  745,  745,  735,  745,  735,  745,  745,  745,  745,
      735,  746,  735,  745,  747,  745,  748,  748,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,

      745,  745,  735,  735,  749,  735,  735,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  738,  751,  735,
      735,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  741,  743,  741,  741,  752,  741,  741,  753,  753,
      150,  150,  150,  150,  150,  150,  150,  150,  742,  754,
      755,  741,  741,  756,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,  745,  747,  745,  745,  757,  745,
      745,  758,  758,  193,  193,  193,  193,  193,  193,  193,

      193,  746,  759,  760,  745,  745,  761,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,  749,  735,  735,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  751,  735,  735,  735,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  752,  741,
      741,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  762,  755,  741,  741,  741,
      756,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,  757,  745,  745,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  763,  760,
      745,  745,  745,  761,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  735,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  735,  735,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  741,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  762,  741,  741,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,  745,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  763,  745,  745,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  735,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  741,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,  193,  193,  193,  193,  193,

      193,  193,  193,  193,  193,  193,  193,  193,  193,  745,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  740,  740,  740,  740,  740,  740,
      740,  740,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,   58,   58,   58,   58,   58,
       58,   58,   58,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,   88,   88,   88,   88,
       88,   88,   88,   88,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  740,  740,  740,  740,  740,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,   58,   58,   58,   58,   58,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,   88,   88,   88,
       88,   88,  750,  750,  750,  750,  750,  750,  750,  750,
      740,  740,  740,  150,  150,  150,  150,  150,  150,  150,
      150,   58,   58,   58,  193,  193,  193,  193,  193,  193,
      193,  193,   88,   88,   88,  750,  750,  750,  750,  750,
      750,  750,  740,  740,  150,  150,  150,  150,  150,  150,
      150,   58,   58,  193,  193,  193,  193,  193,  193,  193,
       88,   88,  750,  750,  750,  750,  750,  750,  740,  150,

      150,  150,  150,  150,  150,   58,  193,  193,  193,  193,
      193,  193,   88,  750,  750,  750,  750,  750,  740,  150,
      150,  150,  150,  150,   58,  193,  193,  193,  193,  193,
       88,  740,   58,   88,    0,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735
    } ;

static yyconst short int yy_nxt[1723] =
    {   0,
       10,   11,   11,   12,   13,   14,   10,   15,   16,   10,
       17,   18,   19,   20,   21,   22,   10,   23,   10,   24,
       25,   26,   27,   28,   29,   26,   26,   30,   26,   26,
       31,   26,   32,   33,   26,   26,   34,   35,   36,   26,
       37,   26,   38,   39,   40,   41,   40,   41,   42,   43,
       43,   44,   45,   46,   42,   47,   48,   42,   49,   50,
       51,   52,   53,   54,   55,   56,   42,   57,   58,   59,
       60,   61,   62,   59,   59,   63,   59,   59,   64,   59,
       65,   66,   59,   59,   67,   68,   69,   59,   70,   59,
       71,   39,   72,   73,   73,   74,   75,   76,   72,   77,

       78,   72,   79,   80,   81,   82,   83,   84,   85,   86,
       72,   87,   88,   89,   90,   91,   92,   89,   89,   93,
       89,   89,   94,   89,   95,   96,   89,   89,   97,   98,
       99,   89,  100,   89,  101,  102,  103,  103,  106,  107,
      107,  108,  120,  121,  110,  111,  112,  133,  130,  127,
      144,  144,  113,  138,  114,  131,  115,  134,  116,  117,
      128,  132,  139,  129,  145,  143,  147,  147,  148,  148,
      165,  165,  304,  143,  143,  168,  143,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  143,  142,  142,  146,  146,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  143,  142,  142,  149,
      150,  150,  151,  152,  153,  150,  150,  150,  150,  150,
      154,  150,  155,  150,  156,  150,  157,  158,  150,  150,
      150,  150,  142,  142,  162,  163,  165,  170,  165,  173,
      143,  165,  119,  190,  176,  165,  174,  160,  171,  165,
      186,  172,  175,  169,  177,  178,  180,  165,  165,  165,
      165,  179,  181,  190,  191,  191,  183,  236,  184,  208,

      186,  182,  237,  211,  118,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  143,  142,  142,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  142,  142,  142,
      142,  142,  142,  142,  188,  142,  142,  187,  187,  208,
      142,  142,  142,  142,  143,  142,  186,  185,  118,  205,
      206,  208,  186,  213,  109,  186,  212,  208,  219,  208,
      166,  203,  223,  222,  214,  145,  208,  215,  220,  221,
      142,  142,  142,  142,  142,  142,  142,  143,  142,  142,

      105,  208,  216,  142,  142,  142,  142,  143,  142,  217,
      208,  208,  266,  224,  167,  218,  208,  103,  103,  267,
      226,  232,  225,  229,  230,  233,  227,  106,  107,  107,
      292,  165,  246,  142,  185,  185,  185,  247,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      186,  185,  185,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  185,  185,  185,  185,
      185,  208,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  186,  185,  185,  192,  193,  193,

      194,  195,  196,  193,  193,  193,  193,  193,  197,  193,
      198,  193,  199,  193,  200,  201,  193,  193,  193,  193,
      185,  185,  185,  185,  185,  165,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  186,  185,
      185,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  185,  185,  185,  185,  185,  256,
      185,  185,  238,  185,  185,  257,  165,  734,  185,  185,
      185,  185,  186,  185,  242,  279,  239,  301,  243,  248,
      248,  246,  144,  144,  270,  271,  247,  277,  209,  280,

      143,  283,  278,  165,  165,  284,  142,  143,  185,  185,
      185,  185,  185,  293,  185,  185,  294,  185,  185,  165,
      160,  733,  185,  185,  185,  185,  186,  185,  147,  148,
      148,  298,  288,  210,  165,  143,  143,  289,  290,  290,
      288,  296,  165,  299,  143,  289,  295,  118,  165,  300,
      165,  165,  185,  185,  142,  142,  142,  142,  142,  142,
      165,  142,  142,  165,  303,  305,  142,  142,  142,  142,
      143,  142,  165,  165,  306,  187,  187,  188,  308,  309,
      320,  313,  314,  732,  311,  321,  310,  186,  208,  186,
      186,  326,  322,  185,  118,  327,  142,  142,  142,  142,

      142,  142,  142,  351,  142,  142,  323,  203,  165,  142,
      142,  142,  142,  143,  142,  190,  191,  191,  410,  331,
      335,  208,  186,  186,  332,  333,  333,  331,  208,  208,
      208,  186,  332,  273,  338,  339,  208,  274,  336,  142,
      142,  142,  142,  142,  142,  142,  208,  142,  142,  337,
      208,  730,  142,  142,  142,  142,  143,  142,  341,  342,
      208,  344,  208,  208,  208,  343,  208,  208,  347,  208,
      229,  230,  729,  352,  346,  291,  348,  349,  355,  355,
      353,  354,  142,  142,  142,  142,  142,  142,  142,  160,
      142,  142,  369,  370,  728,  142,  142,  142,  142,  143,

      142,  248,  248,  246,  270,  271,  384,  384,  247,  401,
      143,  165,  143,  399,  400,  165,  118,  406,  165,  143,
      165,  165,  165,  165,  409,  142,  185,  185,  185,  402,
      185,  185,  405,  185,  185,  403,  404,  727,  185,  185,
      185,  185,  186,  185,  290,  290,  288,  165,  165,  165,
      143,  289,  413,  313,  314,  408,  165,  726,  412,  186,
      208,  407,  334,  118,  431,  208,  208,  208,  185,  185,
      185,  185,  185,  433,  185,  185,  203,  185,  185,  432,
      434,  208,  185,  185,  185,  185,  186,  185,  414,  414,
      429,  430,  165,  208,  186,  435,  186,  333,  333,  331,

      556,  436,  208,  186,  332,  208,  316,  437,  208,  438,
      317,  724,  185,  185,  185,  185,  185,  442,  185,  185,
      208,  185,  185,  208,  439,  447,  185,  185,  185,  185,
      186,  185,  443,  440,  355,  355,  208,  448,  246,  458,
      458,  246,  473,  247,  384,  384,  247,  291,  288,  723,
      143,  165,  143,  289,  474,  486,  185,  185,  185,  185,
      185,  160,  185,  185,  165,  185,  185,  485,  722,  721,
      185,  185,  185,  185,  186,  185,  484,  484,  288,  165,
      165,  165,  143,  289,  490,  165,  165,  489,  118,  491,
      492,  331,  165,  487,  165,  186,  332,  720,  493,  208,

      185,  185,  142,  142,  142,  142,  142,  142,  495,  142,
      142,  165,  499,  513,  142,  142,  142,  142,  143,  142,
      208,  494,  414,  414,  500,  334,  118,  515,  186,  510,
      510,  331,  165,  719,  208,  186,  332,  511,  208,  203,
      208,  557,  512,  516,  142,  142,  142,  142,  142,  142,
      142,  208,  142,  142,  518,  517,  208,  142,  142,  142,
      142,  143,  142,  208,  208,  208,  458,  458,  246,  165,
      484,  484,  288,  247,  520,  519,  143,  289,  165,  521,
      165,  165,  558,  208,  718,  559,  208,  142,  185,  185,
      185,  577,  185,  185,  717,  185,  185,  563,  562,  579,

      185,  185,  185,  185,  186,  185,  510,  510,  331,  208,
      208,  208,  186,  332,  589,  605,  612,  580,  578,  208,
      165,  613,  716,  165,  590,  606,  591,  607,  165,  583,
      185,  185,  185,  185,  185,  584,  185,  185,  165,  185,
      185,  165,  653,  165,  185,  185,  185,  185,  186,  185,
      614,  615,  616,  621,  628,  629,  208,  208,  208,  208,
      165,  208,  654,  622,  208,  623,  208,  165,  630,  631,
      632,  165,  652,  665,  185,  185,  663,  682,  208,  208,
      664,  165,  208,  165,  208,  691,  715,  714,  706,  713,
      208,  712,  711,  710,  709,  708,  725,  731,  118,  707,

      118,  118,  118,  118,  122,  122,  142,  142,  142,  142,
      142,  159,  159,  159,  159,  159,  159,  164,  165,  164,
      164,  164,  164,  165,  165,  165,  165,  165,  185,  185,
      705,  185,  185,  185,  202,  202,  202,  202,  202,  202,
      207,  704,  207,  207,  207,  207,  208,  208,  703,  208,
      208,  208,  228,  228,  231,  231,  245,  245,  269,  269,
      269,  269,  269,  272,  272,  272,  272,  272,  286,  702,
      286,  286,  286,  286,  287,  287,  287,  287,  287,  291,
      291,  291,  291,  291,  312,  312,  701,  312,  312,  312,
      315,  315,  700,  315,  315,  315,  329,  699,  329,  329,

      329,  329,  330,  330,  698,  330,  330,  330,  334,  334,
      697,  334,  334,  334,  398,  398,  398,  398,  398,  398,
      428,  428,  428,  428,  428,  428,  696,  695,  694,  693,
      692,  208,  690,  689,  688,  687,  686,  685,  684,  683,
      165,  681,  680,  679,  678,  677,  676,  675,  674,  673,
      672,  671,  670,  669,  668,  667,  666,  208,  208,  662,
      661,  660,  659,  658,  657,  656,  655,  165,  165,  651,
      650,  649,  648,  647,  646,  645,  644,  643,  642,  641,
      640,  639,  638,  637,  636,  635,  634,  633,  208,  208,
      208,  627,  626,  625,  624,  620,  619,  618,  617,  165,

      165,  165,  611,  610,  609,  608,  604,  603,  602,  601,
      600,  599,  598,  597,  596,  595,  594,  593,  592,  588,
      587,  586,  585,  208,  208,  582,  581,  208,  576,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  165,  165,  561,  560,  165,  555,  554,  553,  552,
      551,  550,  549,  548,  547,  546,  545,  544,  543,  542,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  532,
      531,  530,  529,  528,  527,  526,  525,  524,  523,  522,
      208,  208,  514,  509,  508,  507,  506,  505,  504,  503,
      502,  501,  498,  497,  496,  165,  165,  488,  483,  482,

      481,  480,  479,  478,  477,  476,  475,  472,  471,  470,
      469,  468,  467,  466,  465,  464,  463,  462,  461,  460,
      459,  457,  456,  455,  454,  453,  452,  451,  450,  449,
      446,  445,  444,  208,  441,  208,  208,  208,  208,  208,
      208,  186,  186,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  165,  411,  165,  165,
      165,  165,  165,  165,  143,  143,  397,  396,  395,  394,
      393,  392,  391,  390,  389,  388,  387,  386,  385,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  368,  367,  366,  365,  364,  363,  362,  361,

      360,  359,  358,  357,  356,  350,  208,  345,  340,  208,
      186,  328,  325,  324,  319,  318,  186,  307,  165,  302,
      297,  165,  143,  285,  282,  281,  276,  275,  143,  268,
      265,  264,  263,  262,  261,  260,  259,  258,  255,  254,
      253,  252,  251,  250,  249,  244,  241,  240,  235,  234,
      104,  186,  186,  208,  186,  186,  186,  186,  143,  165,
      143,  143,  143,  143,  143,  141,  140,  137,  136,  135,
      126,  125,  124,  123,  106,  104,  735,    9,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,

      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735
    } ;

static yyconst short int yy_chk[1723] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    4,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,   11,   11,   18,   18,
       18,   19,   22,   22,   19,   19,   19,   31,   30,   29,
       43,   43,   19,   35,   19,   30,   19,   31,   19,   19,
       29,   30,   35,   29,   45,   43,   49,   50,   50,   50,
      177,   60,  177,   49,   50,   60,   45,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   52,   54,   54,   61,   62,   63,   63,
       54,   62,  739,   79,   64,   65,   63,   52,   62,   66,
       79,   62,   63,   61,   64,   65,   67,   69,   70,   68,
       67,   66,   68,   80,   80,   80,   69,  112,   70,   90,

       80,   68,  112,   90,   52,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   57,   57,
       57,   57,   57,   57,   75,   57,   57,   73,   73,   91,
       57,   57,   57,   57,   57,   57,   75,   82,   82,   84,
       84,   96,   73,   92,  737,   84,   91,   92,   94,   95,
       57,   82,   97,   96,   92,  145,   97,   92,   94,   95,
       57,   58,   58,   58,   58,   58,   58,  145,   58,   58,

      736,   93,   93,   58,   58,   58,   58,   58,   58,   93,
       98,   99,  140,   98,   58,   93,  100,  103,  103,  140,
       99,  108,   98,  106,  106,  108,  100,  107,  107,  107,
      166,  166,  120,   58,   76,   76,   76,  120,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   81,   81,
       81,  734,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   83,   83,   83,  733,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   87,   87,   87,  130,
       87,   87,  113,   87,   87,  130,  174,  731,   87,   87,
       87,   87,   87,   87,  116,  154,  113,  174,  116,  121,
      121,  121,  144,  144,  147,  147,  121,  153,   87,  154,

      147,  157,  153,  168,  167,  157,  159,  144,   87,   87,
       88,   88,   88,  167,   88,   88,  168,   88,   88,  172,
      159,  725,   88,   88,   88,   88,   88,   88,  148,  148,
      148,  172,  162,   88,  170,  148,  162,  162,  163,  163,
      163,  170,  169,  173,  163,  163,  169,  159,  173,  173,
      176,  178,   88,   88,  146,  146,  146,  146,  146,  146,
      180,  146,  146,  182,  176,  178,  146,  146,  146,  146,
      146,  146,  184,  183,  180,  187,  187,  188,  182,  183,
      196,  190,  190,  719,  184,  196,  183,  190,  225,  188,
      187,  200,  197,  202,  202,  200,  146,  149,  149,  149,

      149,  149,  149,  225,  149,  149,  197,  202,  307,  149,
      149,  149,  149,  149,  149,  191,  191,  191,  307,  205,
      209,  209,  191,  205,  205,  206,  206,  206,  213,  210,
      212,  206,  206,  149,  212,  213,  211,  149,  210,  149,
      150,  150,  150,  150,  150,  150,  215,  150,  150,  211,
      217,  712,  150,  150,  150,  150,  150,  150,  215,  216,
      219,  217,  221,  223,  216,  216,  220,  226,  220,  227,
      229,  229,  711,  226,  219,  286,  221,  223,  230,  230,
      226,  227,  150,  161,  161,  161,  161,  161,  161,  286,
      161,  161,  246,  246,  709,  161,  161,  161,  161,  161,

      161,  248,  248,  248,  270,  270,  271,  271,  248,  293,
      270,  293,  271,  288,  288,  294,  286,  298,  297,  288,
      304,  298,  295,  296,  304,  161,  189,  189,  189,  294,
      189,  189,  297,  189,  189,  295,  296,  708,  189,  189,
      189,  189,  189,  189,  290,  290,  290,  299,  301,  309,
      290,  290,  310,  313,  313,  301,  310,  707,  309,  313,
      338,  299,  329,  329,  336,  337,  336,  339,  189,  189,
      192,  192,  192,  338,  192,  192,  329,  192,  192,  337,
      339,  340,  192,  192,  192,  192,  192,  192,  314,  314,
      331,  331,  485,  342,  314,  340,  331,  333,  333,  333,

      485,  341,  344,  333,  333,  341,  192,  342,  352,  344,
      192,  705,  192,  192,  193,  193,  193,  352,  193,  193,
      347,  193,  193,  350,  347,  359,  193,  193,  193,  193,
      193,  193,  353,  350,  355,  355,  353,  359,  369,  370,
      370,  370,  388,  369,  384,  384,  370,  398,  399,  704,
      384,  402,  399,  399,  388,  402,  193,  193,  204,  204,
      204,  398,  204,  204,  401,  204,  204,  401,  702,  701,
      204,  204,  204,  204,  204,  204,  400,  400,  400,  403,
      406,  407,  400,  400,  407,  408,  410,  406,  398,  408,
      409,  429,  409,  403,  413,  429,  429,  700,  410,  433,

      204,  204,  269,  269,  269,  269,  269,  269,  413,  269,
      269,  412,  418,  433,  269,  269,  269,  269,  269,  269,
      436,  412,  414,  414,  418,  428,  428,  436,  414,  430,
      430,  430,  486,  699,  431,  430,  430,  431,  432,  428,
      437,  486,  432,  437,  269,  287,  287,  287,  287,  287,
      287,  438,  287,  287,  439,  438,  439,  287,  287,  287,
      287,  287,  287,  440,  442,  443,  458,  458,  458,  487,
      484,  484,  484,  458,  442,  440,  484,  484,  489,  443,
      493,  494,  487,  511,  698,  489,  513,  287,  312,  312,
      312,  511,  312,  312,  697,  312,  312,  494,  493,  513,

      312,  312,  312,  312,  312,  312,  510,  510,  510,  512,
      515,  519,  510,  510,  526,  547,  556,  515,  512,  520,
      556,  557,  695,  557,  526,  547,  526,  547,  613,  519,
      312,  312,  330,  330,  330,  520,  330,  330,  561,  330,
      330,  560,  613,  563,  330,  330,  330,  330,  330,  330,
      560,  561,  563,  568,  577,  578,  582,  578,  577,  581,
      612,  584,  614,  568,  628,  568,  629,  614,  581,  582,
      584,  652,  612,  630,  330,  330,  628,  652,  630,  663,
      629,  683,  692,  706,  713,  663,  694,  693,  683,  692,
      691,  689,  688,  687,  686,  685,  706,  713,  738,  684,

      738,  738,  738,  738,  740,  740,  741,  741,  741,  741,
      741,  742,  742,  742,  742,  742,  742,  743,  682,  743,
      743,  743,  743,  744,  744,  744,  744,  744,  745,  745,
      680,  745,  745,  745,  746,  746,  746,  746,  746,  746,
      747,  679,  747,  747,  747,  747,  748,  748,  678,  748,
      748,  748,  749,  749,  750,  750,  751,  751,  752,  752,
      752,  752,  752,  753,  753,  753,  753,  753,  754,  677,
      754,  754,  754,  754,  755,  755,  755,  755,  755,  756,
      756,  756,  756,  756,  757,  757,  676,  757,  757,  757,
      758,  758,  675,  758,  758,  758,  759,  674,  759,  759,

      759,  759,  760,  760,  671,  760,  760,  760,  761,  761,
      670,  761,  761,  761,  762,  762,  762,  762,  762,  762,
      763,  763,  763,  763,  763,  763,  669,  668,  667,  666,
      665,  664,  662,  660,  659,  658,  657,  656,  655,  654,
      653,  651,  649,  648,  647,  646,  645,  644,  643,  641,
      640,  638,  637,  636,  635,  634,  633,  632,  631,  625,
      624,  623,  622,  621,  620,  619,  617,  616,  615,  609,
      608,  607,  606,  605,  604,  603,  601,  598,  597,  596,
      593,  592,  591,  590,  589,  588,  587,  585,  583,  580,
      579,  576,  575,  570,  569,  567,  566,  565,  564,  562,

      559,  558,  555,  554,  549,  548,  546,  545,  544,  543,
      542,  540,  539,  536,  535,  534,  533,  528,  527,  525,
      524,  523,  522,  521,  518,  517,  516,  514,  509,  508,
      507,  506,  505,  504,  503,  501,  500,  499,  498,  497,
      496,  495,  492,  491,  490,  488,  483,  482,  481,  480,
      479,  478,  477,  475,  474,  473,  472,  471,  470,  468,
      467,  465,  464,  463,  461,  460,  459,  457,  456,  455,
      454,  453,  452,  451,  449,  448,  447,  446,  445,  444,
      441,  435,  434,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  417,  416,  415,  411,  405,  404,  397,  396,

      395,  394,  393,  392,  391,  390,  389,  387,  386,  385,
      383,  382,  380,  379,  378,  377,  376,  374,  373,  372,
      371,  368,  367,  366,  365,  364,  363,  362,  361,  360,
      358,  357,  356,  354,  351,  349,  348,  346,  345,  343,
      335,  334,  332,  328,  327,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  317,  316,  311,  308,  306,  305,
      303,  302,  300,  292,  291,  289,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  267,
      266,  265,  264,  261,  258,  256,  255,  254,  253,  252,
      251,  250,  244,  243,  242,  241,  240,  239,  238,  237,

      236,  235,  234,  233,  232,  224,  222,  218,  214,  208,
      207,  201,  199,  198,  195,  194,  185,  181,  179,  175,
      171,  165,  164,  158,  156,  155,  152,  151,  142,  141,
      139,  138,  137,  135,  134,  133,  132,  131,  129,  128,
      127,  126,  125,  124,  123,  117,  115,  114,  111,  110,
      104,  102,  101,   89,   86,   78,   77,   72,   71,   59,
       56,   48,   47,   44,   42,   37,   36,   34,   33,   32,
       28,   27,   25,   24,   17,   13,    9,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,

      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.l"
#define INITIAL 0
#define YY_NO_UNPUT 1
#line 5 "scanner.l"
static int line   = 1;
static int column = 1;

#include <string.h>
#include <math.h>

#include "expr.h"
#include "smt_parser.h"

void FlexPosition();
unsigned yysmtlval;

#define DIM(a)  (sizeof(a)/sizeof((a)[0]))
#define WHITE_RETURN()   FlexPosition()
#define FlexReturn(tk) { FlexPosition(); return tk; }

#define ANNOTATION 1

#define INCURLY 2

#define INSTRING 3

#line 1045 "lex.yysmt.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 33 "scanner.l"


#line 1199 "lex.yysmt.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 736 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1678 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 35 "scanner.l"
{ BEGIN(INCURLY); FlexReturn(LCB); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 36 "scanner.l"
{ newstack(yysmtlval);
                                   stack(yysmtlval).id(yysmttext);
                                   BEGIN(0); FlexReturn(USER_VALUE_CONTENT); }                     
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 39 "scanner.l"
{ BEGIN(0); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 41 "scanner.l"
{ BEGIN(0); FlexReturn(QUOTE); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 42 "scanner.l"
{ newstack(yysmtlval);
                      stack(yysmtlval).id(yysmttext); 
                      FlexReturn(STRING_CONTENT); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 48 "scanner.l"
{ WHITE_RETURN(); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 49 "scanner.l"
{ WHITE_RETURN(); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 51 "scanner.l"
{ FlexReturn(LPAR); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 52 "scanner.l"
{ FlexReturn(RPAR); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 53 "scanner.l"
{ FlexReturn(LBR); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 54 "scanner.l"
{ FlexReturn(RBR); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 55 "scanner.l"
{ FlexReturn(LCB); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 56 "scanner.l"
{ FlexReturn(RCB); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 57 "scanner.l"
{ BEGIN(INSTRING); FlexReturn(QUOTE); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 58 "scanner.l"
{FlexReturn(BENCHMARK); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 59 "scanner.l"
{FlexReturn(STATUS); }
	YY_BREAK
case 17:
#line 63 "scanner.l"
case 18:
#line 64 "scanner.l"
case 19:
YY_RULE_SETUP
#line 64 "scanner.l"
{ newstack(yysmtlval);
               stack(yysmtlval).id(yysmttext); 
               FlexReturn(STATUS_ID); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 67 "scanner.l"
{ FlexReturn(LOGICA); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 68 "scanner.l"
{ FlexReturn(EXTRAFUNS); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 69 "scanner.l"
{ FlexReturn(EXTRAPREDS); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 70 "scanner.l"
{ FlexReturn(EXTRASORTS); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 71 "scanner.l"
{ FlexReturn(FORMULA); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 72 "scanner.l"
{ FlexReturn(ASSUMPTION); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 73 "scanner.l"
{ FlexReturn(NOTES); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 75 "scanner.l"
{ FlexReturn(THEORY); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 76 "scanner.l"
{ FlexReturn(LOGIC); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 78 "scanner.l"
{ FlexReturn(THEORYA); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 79 "scanner.l"
{ FlexReturn(SORTS); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 80 "scanner.l"
{ FlexReturn(FUNS); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 81 "scanner.l"
{ FlexReturn(PREDS); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 82 "scanner.l"
{ FlexReturn(DEFINITION); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 83 "scanner.l"
{ FlexReturn(AXIOMS); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 84 "scanner.l"
{ FlexReturn(LANGUAGE); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 85 "scanner.l"
{ FlexReturn(EXTENSIONS); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "scanner.l"
{ FlexReturn(FORALL); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "scanner.l"
{ FlexReturn(EXISTS); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "scanner.l"
{ FlexReturn(TRUE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "scanner.l"
{ FlexReturn(FALSE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "scanner.l"
{ FlexReturn(DISTINCT); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "scanner.l"
{ FlexReturn(NOT); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "scanner.l"
{ FlexReturn(IMPLIES); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "scanner.l"
{ FlexReturn(ITE); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "scanner.l"
{ FlexReturn(IF_THEN_ELSE); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "scanner.l"
{ FlexReturn(AND); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "scanner.l"
{ FlexReturn(OR); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "scanner.l"
{ FlexReturn(XOR); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "scanner.l"
{ FlexReturn(IFF); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "scanner.l"
{ FlexReturn(LET); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "scanner.l"
{ FlexReturn(FLET); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "scanner.l"
{ newstack(yysmtlval);
                stack(yysmtlval).id(yysmttext);
                FlexReturn(VAR); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 106 "scanner.l"
{ newstack(yysmtlval);
                stack(yysmtlval).id(yysmttext);
                FlexReturn (FVAR); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 109 "scanner.l"
{ newstack(yysmtlval);
                stack(yysmtlval).id(yysmttext);
                BEGIN(ANNOTATION); FlexReturn(ATTRIBUTE);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "scanner.l"
{ newstack(yysmtlval);
                stack(yysmtlval).id("natural");
                stack(yysmtlval).set("value", yysmttext);
                FlexReturn (NUMERAL); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "scanner.l"
{ newstack(yysmtlval);
              stack(yysmtlval).id(yysmttext);
              FlexReturn (IDENT);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 119 "scanner.l"
{ newstack(yysmtlval); 
              stack(yysmtlval).id(yysmttext);
              FlexReturn(ARITH_SYMB);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 122 "scanner.l"
{ newstack(yysmtlval); 
              stack(yysmtlval).id("rational");
              stack(yysmtlval).set("value", yysmttext);
              FlexReturn(RATIONAL);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 126 "scanner.l"
{ newstack(yysmtlval); 
              stack(yysmtlval).id("index");
              std::string val = yysmttext;
              val = val.substr(1, val.length()-2);
              stack(yysmtlval).set("value", val);              
              FlexReturn(INDEX);}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ANNOTATION):
case YY_STATE_EOF(INCURLY):
case YY_STATE_EOF(INSTRING):
#line 133 "scanner.l"
{ FlexReturn(LEXEOF); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 134 "scanner.l"
ECHO;
	YY_BREAK
#line 1610 "lex.yysmt.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 736 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 736 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 735);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 134 "scanner.l"


#include <stdio.h>
#include <ctype.h>

#define YYERRCODE       256

char  yyerrsrc[64] = "";                        /* current input file name */

void FlexPosition()
{
  int i;
   
  for(i=0; i<yyleng; i++)
  {
    if (yytext[i]=='\n')
    {
      column = 0;
      line++;
    }
    else
      column++;

    PARSER.column_no=column;
  }
}
