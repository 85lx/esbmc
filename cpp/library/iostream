/*******************************************************************\
 *
 *
 * Author: Blanc Nicolas
 *
 *
\*******************************************************************/

#ifndef STL_IOSTREAM
#define STL_IOSTREAM

#ifndef EOF
# define EOF (-1)
#endif

namespace std
{
	struct ostream
	{
		ostream(int id): id(id){}
		int id;
		void fill(char c);
		void precision(int p);
	private:
		ostream(const ostream&); // disabled
		ostream& operator=(const ostream&); // disabled
	};

	struct istream
	{
		istream(int id): id(id){}
		int id;
	private:
		istream(const istream&); // disabled
		istream& operator=(const istream&); // disabled
	public:
		int get();
	};

	struct iostream: ostream, istream
	{
		iostream(int id): ostream(id), istream(id){}
	private:
		iostream(const iostream&); // disabled
		iostream& operator=(const iostream&); // disabled
	};

	struct setprecision
	{
		setprecision(int p);
	};

	struct setbase
	{
		setbase(int b);
	};

	struct fixedStruct
	{
		fixedStruct();
	private:
		fixedStruct(const fixedStruct&); // disabled
	};

	struct averageStruct
	{
		averageStruct();
	private:
		averageStruct(const averageStruct&); // disabled
	};

	struct leftStruct
	{
		leftStruct();
	private:
		leftStruct(const leftStruct&); // disabled
	};

	struct rightStruct
	{
		rightStruct();
	private:
		rightStruct(const rightStruct&); // disabled
	};

	struct hexStruct
	{
		hexStruct();
	private:
		hexStruct(const hexStruct&); // disabled
	};

	struct decStruct
	{
		decStruct();
	private:
		decStruct(const decStruct&); // disabled
	};

	struct octStruct
	{
		octStruct();
	private:
		octStruct(const octStruct&); // disabled
	};

	struct setw
	{
		setw(int w);
	};

	struct setfill
	{
		setfill(char f);
	};

	struct flushStruct
	{
		flushStruct();
	private:
		flushStruct(const flushStruct&); // disabled

	};

	struct scientificStruct
	{
		scientificStruct();
	private:
		scientificStruct(const scientificStruct&); // disabled
	};

	struct showpointStruct
	{
		showpointStruct();
	private:
		showpointStruct(const showpointStruct&); // disabled
	};

	struct showbaseStruct
	{
		showbaseStruct();
	private:
		showbaseStruct(const showbaseStruct&);
	};

	struct internalStruct
	{
		internalStruct();
	private:
		internalStruct(const internalStruct&);
	};

	struct showposStruct
	{
		showposStruct();
	private:
		showposStruct(const showposStruct&);
	};

	struct boolalphaStruct
	{
		boolalphaStruct();
	private:
		boolalphaStruct(const boolalphaStruct&);
	};

	struct noboolalphaStruct
	{
		noboolalphaStruct();
	private:
		noboolalphaStruct(const noboolalphaStruct&);
	};

	struct iosStruct
	{
		iosStruct();
	private:
		iosStruct(const iosStruct&);
	};

	extern istream cin;
	extern ostream cout;
	extern ostream cerr;
	extern fixedStruct fixed;
	extern averageStruct average;
	extern leftStruct left;
	extern rightStruct right;
	extern hexStruct hex;
	extern octStruct oct;
	extern decStruct dec;
	extern flushStruct flush;
	extern scientificStruct scientific;
	extern showpointStruct showpoint;
	extern showpointStruct showbase;
	extern internalStruct internal;
	extern showposStruct showpos;
	extern boolalphaStruct boolalpha;
	extern noboolalphaStruct noboolalpha;
	extern iosStruct ios;

	char endl = '\n';
}

namespace esbmc
{
	void esbmc_print_cstr(int o, const char* cstr);
	void esbmc_print_char(int o, char c);
	void esbmc_print_int(int o, int i);
	void esbmc_print_double(int o, double d); //Felipe Rodrigues
	void esbmc_print_unsigned(int o, unsigned i); 
	void esbmc_print_bool(int o, bool b);
	void esbmc_print_long_long(int o, long long i);       	
	void esbmc_print_unsigned_long_long(int o, unsigned long long i);

	void esbmc_read_char(int is, char& c);
	void esbmc_read_int(int is,  int& i);
	void esbmc_read_unsigned_long(int is,  unsigned long& l); //Felipe Rodrigues
	void esbmc_read_double(int is,  double& d); //Felipe Rodrigues
}

namespace std
{
	bool nondet_bool();
	unsigned int nondet_uint();

	inline istream& operator >> (istream& is, char& c)
	{ 
		esbmc::esbmc_read_char(is.id,c);
		return is;
	}

	inline istream& operator >> (istream& is, char c[])
	{
		return is;
	}

	inline istream& operator >> (istream& is, int& i)
	{ 
		esbmc::esbmc_read_int(is.id,i);
		return is;
	}

	inline istream& operator >> (istream& is, unsigned long& l) //Felipe Rodrigues
	{ 
		esbmc::esbmc_read_unsigned_long(is.id,l);
		return is;
	}

	inline istream& operator >> (istream& is, double& d) //Felipe Rodrigues
	{ 
		esbmc::esbmc_read_double(is.id,d);
		return is;
	}
	
	inline ostream& operator << (ostream& o, const char*  cstr)
	{ 
		esbmc::esbmc_print_cstr(o.id, cstr);
		return o;
	}

	inline ostream& operator << (ostream& o, char  c)
	{ 
		esbmc::esbmc_print_char(o.id, c);
		return o;
	}

	inline ostream&  operator << (ostream& o, int  i)
	{ 
		esbmc::esbmc_print_int(o.id, i);
		return o;
	}

	inline ostream&  operator << (ostream& o, double  d) // Felipe Rodrigues
	{ 
		esbmc::esbmc_print_double(o.id, d);
		return o;
	}

	inline ostream& operator << (ostream& o, unsigned  i)
	{ 
		esbmc::esbmc_print_unsigned(o.id, i);
		return o;

	}
	inline ostream& operator << (ostream& o, long long  i)
	{ 
		esbmc::esbmc_print_long_long(o.id, i);
		return o;
	}

	inline ostream& operator << (ostream& o, unsigned long long  i)
	{ 
		esbmc::esbmc_print_unsigned_long_long(o.id, i);
		return o;
	}

	inline ostream& operator << (ostream& o, bool  b)
	{ 
		esbmc::esbmc_print_bool(o.id, b);
		return o;
	}

	inline ostream& operator << (ostream& o, setprecision)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, fixedStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, averageStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, setw)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, leftStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, rightStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, hexStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, decStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, octStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, setbase)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, flushStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, setfill)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, scientificStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, showpointStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, showbaseStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, internalStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, showposStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, boolalphaStruct)
	{
		return o;
	}

	inline ostream& operator << (ostream& o, noboolalphaStruct)
	{
		return o;
	}

	int istream::get()
	{
	  if (nondet_bool())
	    return nondet_uint();
	  else
	    return EOF;
	}

	void ostream::fill(char c)
	{
		setfill(c);
	}

	void ostream::precision(int p)
	{
		setprecision(p);
	}

	setw::setw(int w)
	{
		__ESBMC_assert(w >= 0, "The width must be greater or equal than 0");
	}

	setprecision::setprecision(int p)
	{
		__ESBMC_assert(p >= 0, "The precision must be greater or equal than 0");
	}

	setbase::setbase(int b)
	{
		// model
	}

	setfill::setfill(char c)
	{
		// model
	}

}
#endif
