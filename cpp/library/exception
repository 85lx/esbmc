/*******************************************************************\

Module: 

Author: 

Date: Feb 2012

\*******************************************************************/

#ifndef STL_EXCEPTION
#define STL_EXCEPTION

#include "definitions.h"

namespace std {

const char* message;

bool uncaught_exception ( ) throw ( );

typedef void (*terminate_handler)();
terminate_handler set_terminate (terminate_handler f) throw();

typedef void (*unexpected_handler)();
unexpected_handler set_unexpected (unexpected_handler f) throw();

class bad_exception;

struct exception {

public:
  exception( ) throw( );
  exception(const exception& right) throw( );
//  bool uncaught_exception ( ) throw ( );
  exception& operator=(const exception& right) throw( );
  ~exception( ) throw( );
  const char* what() const throw() {
	  return (const char*)message;
	  //Returns a null terminated character sequence containing a generic description of the exception.
	  //Both the wording of such description and the character width are implementation-defined.
	  //source: http://www.cplusplus.com/reference/std/exception/exception/
  }
};

}

#endif
