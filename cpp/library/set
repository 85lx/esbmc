/*******************************************************************\

Module: 

Author: Felipe Rodrigues

Date: September 2012

\*******************************************************************/

#ifndef __STL_SET
#define __STL_SET

#define MAX 500

#include "utility"
#include "iterator"
#include "iostream"
#include "algorithm"
#include "functional"

namespace std {

template<class T>
//class less {};

template < class Key, class Compare = less<Key>,
class Allocator = allocator<Key> >
class multiset{
public:
	// types:
	typedef Key key_type;
	typedef Key value_type;
	typedef Compare key_compare;
	typedef Compare value_compare;

	typedef int size_type;
	typedef int difference_type;

	class iterator{
	public:

		iterator(const iterator&);
		iterator();
		iterator& operator=(const iterator&);

		value_type * operator -> ();

		value_type & operator * ();

		iterator& operator ++ ();
		iterator& operator ++ (int);

		iterator& operator -- ();
		iterator& operator -- (int);

		bool operator == (const iterator& it) const;
		bool operator != (const iterator& it) const;
	};


	class const_iterator{
	public:
		const_iterator(const const_iterator&);
		const_iterator();
		const_iterator& operator=(const const_iterator&);

		const value_type * operator -> ();

		const value_type & operator * ();

		const_iterator& operator ++ ();
		const_iterator& operator ++ (int);

		const_iterator& operator -- ();
		const_iterator& operator -- (int);

		bool operator == ( const const_iterator&)const;
		bool operator != ( const const_iterator&)const;
	};

	class reverse_iterator{
	public:
		reverse_iterator(reverse_iterator);
		reverse_iterator();
		explicit reverse_iterator(iterator);

		iterator base() const; // explicit

		reverse_iterator& operator=(const reverse_iterator&);

		value_type * operator -> ();

		value_type & operator * ();

		reverse_iterator& operator ++ ();
		reverse_iterator& operator ++ (int);

		reverse_iterator& operator -- ();
		reverse_iterator& operator -- (int);

		bool operator == ( const reverse_iterator&)const;
		bool operator != ( const reverse_iterator&)const;
	};

	class  const_reverse_iterator {
	public:
		const_reverse_iterator(const_reverse_iterator);
		const_reverse_iterator();
		explicit const_reverse_iterator(const_iterator);

		const_iterator base() const; // explicit

		const_reverse_iterator& operator=(const const_reverse_iterator);

		const value_type * operator -> ();

		const value_type & operator * ();

		const_reverse_iterator& operator ++ ();
		const_reverse_iterator& operator ++ (int);

		const_reverse_iterator& operator -- ();
		const_reverse_iterator& operator -- (int);

		bool operator == ( const const_reverse_iterator&)const;
		bool operator != ( const const_reverse_iterator&)const;
	};

	explicit multiset ( const Compare& comp = Compare(),
			const Allocator& = Allocator() );
	multiset ( const multiset<Key,Compare,Allocator>& x );
	size_type count ( const key_type& x ) const;
	iterator insert ( const value_type& x );
	iterator insert ( iterator position, const value_type& x );
	template <class InputIterator>
	void insert ( InputIterator first, InputIterator last );
	iterator find ( const key_type& x ) const;
	iterator end ();
	const_iterator end () const;
	const_iterator operator= ( iterator& ) const;
};

//  template <class Key, class Compare = less<Key> >

template < class Key, class Compare = less<Key> >
class set {
public:
	Key buf[MAX];
	size_t _size;
	Compare rule;
	// types:
	typedef Key key_type;
	typedef Key value_type;
	typedef Compare key_compare;
	typedef Compare value_compare;

	typedef int size_type;
	typedef int difference_type;

	class iterator{
	public:
		int pos;
		key_type* base;

		iterator(const iterator& i){
			pos = i.pos;
			base = i.base;
		}

		iterator(key_type *bbase, int ppos){
			pos = ppos;
			base = bbase;
		}

		iterator(){

		}
		iterator& operator=(const iterator& i){
			this->pos = i.pos;
			this->base = i.base;
		}

		value_type * operator -> (){
			return &base[pos];
		}

		value_type & operator * (){
			return base[pos];
		}

		iterator& operator ++ (){
			return iterator(base, ++pos);
		}
		iterator& operator ++ (int b){
			return iterator(base, pos++);
		}

		iterator operator + (int var){
			return iterator(base, pos + var);
		}

		iterator& operator -- (){
			return iterator(base, --pos);
		}
		iterator& operator -- (int b){
			return iterator(base, pos--);
		}

		iterator operator - (int var){
			return iterator(base, pos - var);
		}

		bool operator == (const iterator& it) const{
			return ((base == it.base)&&(pos == it.pos));
		}
		bool operator != (const iterator& it) const{
			return !((base == it.base)&&(pos == it.pos));
		}

		bool operator < (const iterator& it) const{
			return (pos < it.pos);
		}
	};


	class const_iterator{
	public:
		const_iterator(const const_iterator&);
		const_iterator();
		const_iterator& operator=(const const_iterator&);

		const value_type * operator -> ();

		const value_type & operator * ();

		const_iterator& operator ++ ();
		const_iterator& operator ++ (int);

		const_iterator& operator -- ();
		const_iterator& operator -- (int);

		bool operator == ( const const_iterator&)const;
		bool operator != ( const const_iterator&)const;
	};

	class reverse_iterator{
	public:
		reverse_iterator(reverse_iterator);
		reverse_iterator();
		explicit reverse_iterator(iterator);

		iterator base() const; // explicit

		reverse_iterator& operator=(const reverse_iterator&);

		value_type * operator -> ();

		value_type & operator * ();

		reverse_iterator& operator ++ ();
		reverse_iterator& operator ++ (int);

		reverse_iterator& operator -- ();
		reverse_iterator& operator -- (int);

		bool operator == ( const reverse_iterator&)const;
		bool operator != ( const reverse_iterator&)const;
	};

	class  const_reverse_iterator {
	public:
		const_reverse_iterator(const_reverse_iterator);
		const_reverse_iterator();
		explicit const_reverse_iterator(const_iterator);

		const_iterator base() const; // explicit

		const_reverse_iterator& operator=(const const_reverse_iterator);

		const value_type * operator -> ();

		const value_type & operator * ();

		const_reverse_iterator& operator ++ ();
		const_reverse_iterator& operator ++ (int);

		const_reverse_iterator& operator -- ();
		const_reverse_iterator& operator -- (int);

		bool operator == ( const const_reverse_iterator&)const;
		bool operator != ( const const_reverse_iterator&)const;
	};

	// construct/copy/destroy:
	explicit set ( const Compare& comp = Compare() ) : _size(0){
		//this->rule = comp;
	}

	explicit set ( Key v1[] , Key* v2 ){
		int i = 0;
		while(v1 != v2)
			buf[i++] = *v1++;
		_size = i ;
		std::sort(buf,buf+_size);
	}

	set() : _size(0){

	}

	set ( const set<Key,Compare>& x ){
		_size = 0;
		for(int i = 0 ; i < x._size ; i++){
			buf[i] = x.buf[i];
		}
		buf[_size] = 0;
	}

	set<Key,Compare>& operator= ( const set<Key,Compare>& x ){
		_size = 0;
		for(int i = 0 ; i < x._size ; i++){
			buf[i] = x.buf[i];
		}
		buf[_size] = 0;
	}

	// iterators:
	iterator begin(){
		return iterator(buf, 0);
	}

	iterator end(){
		return iterator(buf, _size);
	}
/*
 * const_iterator begin() const;
	const_iterator end() const;
	reverse_iterator rbegin();
	const_reverse_iterator rbegin() const;
	reverse_iterator rend();
	const_reverse_iterator rend() const;
*/

	// capacity:
	bool empty() const{
		return !(_size==0);
	}
	size_type size() const{
		return _size;
	}
	size_type max_size() const;

	// modifiers:
	pair<iterator,bool> insert(const value_type& x){
		iterator it = std::find(begin(), end(), x);
		if(it != end())
			return make_pair(it, false);
		else
			return make_pair(insert(it, x), true);
	}

	iterator insert(iterator position, const value_type& x){
		_size++;
		int i = _size;
		int aux;
		while( i > position.pos - 1){
			aux = i +1;
			buf[aux] = buf[i];
			i--;
		}
		buf[position.pos] = x;
		return position;
	}

	void erase(iterator position);
	size_type erase(const key_type& x);
	void erase(iterator first, iterator last);
	void swap(set<Key,Compare>&);
	void clear(){
		_size = 0;
	}

	// observers:
	key_compare key_comp() const;
	value_compare value_comp() const;
	// set operations:
	iterator find(const key_type& x) const;
	size_type count(const key_type& x) const;
	iterator lower_bound(const key_type& x) const;
	iterator upper_bound(const key_type& x) const;
	pair<iterator,iterator> equal_range(const key_type& x) const;

	bool operator == (const set<Key,Compare>&) const;
	bool operator != (const set<Key,Compare>&) const;
	bool operator >= (const set<Key,Compare>&) const;
	bool operator <= (const set<Key,Compare>&) const;


};
}

#endif


