# This file contains common build rules; to be included at the _end_ of a
# makefile. Configuration options that are needed during the makefile itself
# should be put in another config file.

# Make ubuntu happy (which uses dash by default)
SHELL := /bin/bash

OBJS1 = $(SRCS:%.c=$(OBJDIR)/%.o)
OBJS+= $(OBJS1:%.cpp=$(OBJDIR)/%.o)

# Given the presence of OBJDIR, $(OBJS) can't now automatically infer
# dependancies between .o's and .cpp's etc

ifdef CROSSCOMPILE
# Create a set of dependancies that build source files into HOSTOBJDIR using
# the host compiler. A downside of c2goto and the like is that we have to build
# almost everything for the host, and everything for the target too. Too bad.
HOSTOBJS1 = $(SRCS:%.c=$(HOSTOBJDIR)/%.o)
HOSTOBJS+= $(HOSTOBJS1:%.cpp=$(HOSTOBJDIR)/%.o)
else
HOSTOBJS=$(OBJS)
endif

# list of includes, potentially modified by includer
INCLUDES+= -I$(ESBMCDIR) -I$(ESBMCDIR)/util

# Strictness: Some code would appear to require -fpermissive to compile. This
# is bad, but perhaps necessary in some circumstances. So by default, compile
# with -fpermissive.
# However for other pieces of code we might be able to compile with stricter
# requirements; for directories where this is the case, define "STRICTCOMPILE",
# which will result in additional strictness compile flags being used.

ifndef STRICTCOMPILE
CXXFLAGS+=-fpermissive -Wno-deprecated -Wall -Wextra -std=c++0x -fno-strict-aliasing
else
CXXFLAGS+= -W -Wall -Wextra -Werror -std=c++0x -fno-strict-aliasing -DEIGEN_MPL2_ONLY
endif

CFLAGS+= $(GCCFLAGS) $(OPTS) $(INCLUDES) $(EXTRACFLAGS)
CXXFLAGS+= $(GCCFLAGS) $(OPTS) $(INCLUDES) $(EXTRACXXFLAGS)

$(OBJDIR)/%.o : %.cpp
	$(CXX) -c $(CXXFLAGS) -o $@ $<

$(OBJDIR)/%.o : %.c
	$(CC) -c $(CFLAGS) -o $@ $<

ifdef CROSSCOMPILE
$(HOSTOBJDIR)/%.o : %.cpp
	$(HOSTCXX) -c $(HOSTCXXFLAGS) -o $@ $<

$(HOSTOBJDIR)/%.o : %.c
	$(HOSTCC) -c $(HOSTCFLAGS) -o $@ $<
endif

# A generic target; potentially not defined by the includer

MAINOBJ=$(OBJDIR)/$(MAINOBJNAME)

ifdef CROSSCOMPILE
HOSTOBJ=$(HOSTOBJDIR)/$(MAINOBJNAME)
$(HOSTOBJ): $(HOSTOBJS)
	$(HOSTPARTLINKLD) $(HOSTPARTLINKOUT) $@ $^ $(HOSTPARTLINKOPTS)
else
HOSTOBJ=
endif

$(MAINOBJ): $(OBJS) | $(HOSTOBJ)
	$(PARTLINKLD) $(PARTLINKOUT) $@ $^ $(PARTLINKOPTS)

# Special purpose features,
ifndef LINUX
ifndef ONAMAC
CXXFLAGS+=-DNO_OPENSSL
endif
endif

DEPFILEEXISTS := $(shell stat $(OBJDIR)/.deps 2>/dev/null)
ifneq "$(DEPFILEEXISTS)" ""
include $(OBJDIR)/.deps
endif

#clean defined by includer
.PHONY: clean depend

ifdef DIRS
# Rule for making dependancies on first execution
$(OBJDIR)/.depends:
	echo "Making dependancies"
	$(MAKE) depend
	touch $(OBJDIR)/.depends

$(patsubst %,%/$(OBJDIR)/.deps,$(DIRS)):
	unset CFLAGS && unset CXXFLAGS && $(MAKE) -C $(patsubst %/$(OBJDIR)/.deps,%,$@) depend

depend: $(patsubst %,%/$(OBJDIR)/.deps,$(DIRS))
else
depend: $(SRCS)
	@echo "Making dependancies in $(shell basename $(shell pwd))"
	@echo -n "" > $(OBJDIR)/.deps
	@touch $(OBJDIR)/.deps
	@for src in $(SRCS); do \
		src1=$${src//\.cpp/}; \
		src2=$${src1//\.c/}; \
		$(DEPCXX) $(CXXFLAGS) -I $(ESBMCDIR)/util -I$(ESBMCDIR) -MM -MT $(OBJDIR)/$$src2.o $$src >> $(OBJDIR)/.deps; \
	done

$(OBJDIR)/.deps:
	$(MAKE) depend

endif

# Finally, some special rules for various pieces of hackery for performing debug
# builds.

debug:
	env OBJDIR=.debugobjs HOSTOBJDIR=.hostdebugobjs OPTS=-O0 GCCFLAGS="$(GCCFLAGS) -ggdb3" $(MAKE)

debugclean:
	env OBJDIR=.debugobjs HOSTOBJDIR=.hostdebugobjs $(MAKE) clean

debugfast:
	env OBJDIR=.debugfastobjs HOSTOBJDIR=.hostdebugfastobjs GCCFLAGS="$(GCCFLAGS) -ggdb3" $(MAKE)

debugfastclean:
	env OBJDIR=.debugfastobjs HOSTOBJDIR=.hostdebugfastobjs $(MAKE) clean
