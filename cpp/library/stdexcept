/*******************************************************************
 Module:

 Author: Felipe Rodrigues

 Date: September 2012

 \*******************************************************************/

#ifndef STL_STDEXCEPT
#define STL_STDEXCEPT

#include "definitions.h"
#include "exception"
#include "string"

namespace std {

struct runtime_error: public exception {
public:
	runtime_error() {
		__ESBMC_assert(0, "runtime_error");
	}
	runtime_error(const char* what_arg) {
		message = (char *) what_arg;
		__ESBMC_assert(0, "runtime_error");
	}
};

class range_error: public runtime_error {
public:
	explicit range_error() {
		__ESBMC_assert(0, "range_error");
	}
	explicit range_error(const char* what_arg) {
		message = (char *) what_arg;
		__ESBMC_assert(0, "range_error");
	}
};

class overflow_error: public runtime_error {
public:
	explicit overflow_error() {
		__ESBMC_assert(0, "overflow_error");
	}
	explicit overflow_error(const char* what_arg) {
		message = (char *) what_arg;
		__ESBMC_assert(0, "overflow_error");
	}
};

class underflow_error: public runtime_error {
public:
	explicit underflow_error() {
		__ESBMC_assert(0, "underflow_error");
	}
	explicit underflow_error(const char* what_arg) {
		message = (char *) what_arg;
		__ESBMC_assert(0, "underflow_error");
	}
};

class logic_error: public exception {
public:
	explicit logic_error() {
		__ESBMC_assert(0, "logic_error");
	}
	explicit logic_error(const char* what_arg) {
		message = (char *) what_arg;
		__ESBMC_assert(0, "logic_error");
	}
	virtual ~logic_error() {
	}
};

class domain_error: public logic_error {
public:
	explicit domain_error() {
		__ESBMC_assert(0, "domain_error");
	}
	explicit domain_error(const char* what_arg) {
		message = (char *) what_arg;
		__ESBMC_assert(0, "domain_error");
	}
};

class invalid_argument: public logic_error {
public:
	explicit invalid_argument() {
		__ESBMC_assert(0, "invalid_argument");
	}
	explicit invalid_argument(const char* what_arg) {
		message = (char *) what_arg;
		__ESBMC_assert(0, "invalid_argument");
	}
};

class length_error: public logic_error {
public:
	explicit length_error() {
		__ESBMC_assert(0, "length_error");
	}
	explicit length_error(const char* what_arg) {
		message = (char *) what_arg;
		__ESBMC_assert(0, "length_error");
	}
	virtual ~length_error() {
	}
};

class out_of_range: public logic_error {
public:
	explicit out_of_range() {
		__ESBMC_assert(0, "out_of_range");
	}
	explicit out_of_range(const char* what_arg) {
		message = (char *) what_arg;
		__ESBMC_assert(0, "out_of_range");
	}
	virtual ~out_of_range() {
	}
};

}

#endif
