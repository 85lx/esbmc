/*******************************************************************
 Module:

 Author: Felipe Rodrigues and Mikhail Ramalho

 Date:

 \*******************************************************************/

#ifndef STL_CMATH
#define STL_CMATH

#include "definitions.h"

float sqrt(float n) {
	__ESBMC_assert(n >= 0, "The number must be greater or equal than 0");
	return nondet_float();
}

double sqrt(double x) {
	__ESBMC_assert(x >= 0, "The number must be greater or equal than 0");
	return nondet_double();
}

long double sqrt(long double x) {
	__ESBMC_assert(x >= 0, "The number must be greater or equal than 0");
	return nondet_ldouble();
}

float exp(float n) {
	// model: buffer overflow check.
	return nondet_float();
}

double exp(double x) {
	// model: buffer overflow check.
	return nondet_double();
}

long double exp(long double x) {
	// model: buffer overflow check.
	return nondet_ldouble();
}

float pow(float base, float exponent) {
	// model: buffer overflow check
	// model: base negative and exponent is not a integer value
	__ESBMC_assert( (base != 0) || (exponent => 0) , "base zero and exponent is negative");
	return nondet_float();
}

double pow(double base, double exponent) {
	// model: buffer overflow check
	// model: base negative and exponent is not a integer value
	__ESBMC_assert( (base != 0) || (exponent => 0) , "base zero and exponent is negative");
	return nondet_double();
}

long double pow(long double base, long double exponent) {
	// model: buffer overflow check
	// model: base negative and exponent is not a integer value
	__ESBMC_assert( (base != 0) || (exponent => 0) , "base zero and exponent is negative");
	return nondet_ldouble();
}

double pow(double base, int exponent) {
	// model: buffer overflow check
	// model: base negative and exponent is not a integer value
	__ESBMC_assert( (base != 0) || (exponent => 0) , "base zero and exponent is negative");
	return nondet_double();
}

long double pow(long double base, int exponent) {
	// model: buffer overflow check
	// model: base negative and exponent is not a integer value
	__ESBMC_assert( (base != 0) || (exponent => 0) , "base zero and exponent is negative");
	return nondet_ldouble();
}

float log(float n) {
	__ESBMC_assert(n >= 0, "The number must be greater or equal than 0");
	return nondet_float();
}

double log(double n) {
	__ESBMC_assert(n >= 0, "The number must be greater or equal than 0");
	return nondet_double();
}

long double log(long double n) {
	__ESBMC_assert(n >= 0, "The number must be greater or equal than 0");
	return nondet_ldouble();
}

double log10(double n) {
	__ESBMC_assert(n >= 0, "The number must be greater or equal than 0");
	return nondet_double();
}

long double log10(long double n) {
	__ESBMC_assert(n >= 0, "The number must be greater or equal than 0");
	return nondet_ldouble();
}

float log10(float n) {
	__ESBMC_assert(n >= 0, "The number must be greater or equal than 0");
	return nondet_float();
}

float fabs(float n) {
	return nondet_float();
}

double fabs(double x) {
	return nondet_double();
}

long double fabs(long double x) {
	return nondet_ldouble();
}

float ceil(float n) {
	return nondet_float();
}

double ceil(double x) {
	return nondet_double();
}

long double ceil(long double x) {
	return nondet_ldouble();
}

float floor(float n) {
	return nondet_float();
}

double floor(double x) {
	return nondet_double();
}

long double floor(long double x) {
	return nondet_ldouble();
}

float fmod(float numerator, float denominator) {
	__ESBMC_assert(denominator != 0, "The number must not be equal to 0");
	return nondet_float();
}

double fmod(double numerator, double denominator) {
	__ESBMC_assert(denominator != 0, "The number must not be equal to 0");
	return nondet_double();
}

long double fmod(long double numerator, long double denominator) {
	__ESBMC_assert(denominator != 0, "The number must not be equal to 0");
	return nondet_ldouble();
}

float sin(float n) {
	return nondet_float();
}

double sin(double x) {
	return nondet_double();
}

long double sin(long double x) {
	return nondet_ldouble();
}

double sinh(double x) {
	return nondet_double();
}

float sinh(float x) {
	return nondet_float();
}

long double sinh(long double x) {
	return nondet_ldouble();
}

float cos(float n) {
	return nondet_float();
}

double cosh(double x) {
	return nondet_double();
}

float cosh(float x) {
	return nondet_float();
}

long double cosh(long double x) {
	return nondet_ldouble();
}

float tan(float n) {
	return nondet_float();
}

double tan(double x) {
	return nondet_double();
}

long double tan(long double x) {
	return nondet_ldouble();
}

double tanh(double x) {
	return nondet_double();
}

float tanh(float x) {
	return nondet_float();
}

long double tanh(long double x) {
	return nondet_ldouble();
}

int abs(int n) {
	return nondet_int();
}

long double abs(long double n) {
	return nondet_ldouble();
}

double acos(double x) {
	return nondet_double();
}

float acos(float x) {
	return nondet_float();
}

long double acos(long double x) {
	return nondet_ldouble();
}

double asin(double x) {
	return nondet_double();
}

float asin(float x) {
	return nondet_float();
}

long double asin(long double x) {
	return nondet_ldouble();
}

double atan(double x) {
	return nondet_double();
}

float atan(float x) {
	return nondet_float();
}

long double atan(long double x) {
	return nondet_ldouble();
}

double atan2(double y, double x) {
	return nondet_double();
}

long double atan2(long double y, long double x) {
	return nondet_ldouble();
}

float atan2(float y, float x) {
	return nondet_float();
}

double frexp(double x, int * exp) {
	return nondet_double();
}

float frexp(float x, int * exp) {
	return nondet_float();
}

long double frexp(long double x, int * exp) {
	return nondet_ldouble();
}

double ldexp(double x, int exp) {
	return nondet_double();
}

float ldexp(float x, int exp) {
	return nondet_float();
}

long double ldexp(long double x, int exp) {
	return nondet_ldouble();
}

double modf(double x, double * intpart) {
	return nondet_double();
}

long double modf(long double x, long double * intpart) {
	return nondet_ldouble();
}

float modf(float x, float * intpart) {
	return nondet_float();
}

#endif
